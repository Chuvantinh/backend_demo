// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type Activity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  key: String!
  titel: String
  description: String
  grade: ActivityGrade
  icon: String
  tags: [String!]!
  isCustom: Boolean
  color: String
}

type ActivityConnection {
  pageInfo: PageInfo!
  edges: [ActivityEdge]!
  aggregate: AggregateActivity!
}

input ActivityCreateInput {
  id: ID
  key: String!
  titel: String
  description: String
  grade: ActivityGrade
  icon: String
  tags: ActivityCreatetagsInput
  isCustom: Boolean
  color: String
}

input ActivityCreateManyInput {
  create: [ActivityCreateInput!]
  connect: [ActivityWhereUniqueInput!]
}

input ActivityCreateOneInput {
  create: ActivityCreateInput
  connect: ActivityWhereUniqueInput
}

input ActivityCreatetagsInput {
  set: [String!]
}

type ActivityEdge {
  node: Activity!
  cursor: String!
}

enum ActivityGrade {
  LIGHT
  MODERATE
  HARD
}

enum ActivityOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  key_ASC
  key_DESC
  titel_ASC
  titel_DESC
  description_ASC
  description_DESC
  grade_ASC
  grade_DESC
  icon_ASC
  icon_DESC
  isCustom_ASC
  isCustom_DESC
  color_ASC
  color_DESC
}

type ActivityPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  key: String!
  titel: String
  description: String
  grade: ActivityGrade
  icon: String
  tags: [String!]!
  isCustom: Boolean
  color: String
}

input ActivityScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  titel: String
  titel_not: String
  titel_in: [String!]
  titel_not_in: [String!]
  titel_lt: String
  titel_lte: String
  titel_gt: String
  titel_gte: String
  titel_contains: String
  titel_not_contains: String
  titel_starts_with: String
  titel_not_starts_with: String
  titel_ends_with: String
  titel_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  grade: ActivityGrade
  grade_not: ActivityGrade
  grade_in: [ActivityGrade!]
  grade_not_in: [ActivityGrade!]
  icon: String
  icon_not: String
  icon_in: [String!]
  icon_not_in: [String!]
  icon_lt: String
  icon_lte: String
  icon_gt: String
  icon_gte: String
  icon_contains: String
  icon_not_contains: String
  icon_starts_with: String
  icon_not_starts_with: String
  icon_ends_with: String
  icon_not_ends_with: String
  isCustom: Boolean
  isCustom_not: Boolean
  color: String
  color_not: String
  color_in: [String!]
  color_not_in: [String!]
  color_lt: String
  color_lte: String
  color_gt: String
  color_gte: String
  color_contains: String
  color_not_contains: String
  color_starts_with: String
  color_not_starts_with: String
  color_ends_with: String
  color_not_ends_with: String
  AND: [ActivityScalarWhereInput!]
  OR: [ActivityScalarWhereInput!]
  NOT: [ActivityScalarWhereInput!]
}

type ActivitySubscriptionPayload {
  mutation: MutationType!
  node: Activity
  updatedFields: [String!]
  previousValues: ActivityPreviousValues
}

input ActivitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ActivityWhereInput
  AND: [ActivitySubscriptionWhereInput!]
  OR: [ActivitySubscriptionWhereInput!]
  NOT: [ActivitySubscriptionWhereInput!]
}

input ActivityUpdateDataInput {
  key: String
  titel: String
  description: String
  grade: ActivityGrade
  icon: String
  tags: ActivityUpdatetagsInput
  isCustom: Boolean
  color: String
}

input ActivityUpdateInput {
  key: String
  titel: String
  description: String
  grade: ActivityGrade
  icon: String
  tags: ActivityUpdatetagsInput
  isCustom: Boolean
  color: String
}

input ActivityUpdateManyDataInput {
  key: String
  titel: String
  description: String
  grade: ActivityGrade
  icon: String
  tags: ActivityUpdatetagsInput
  isCustom: Boolean
  color: String
}

input ActivityUpdateManyInput {
  create: [ActivityCreateInput!]
  update: [ActivityUpdateWithWhereUniqueNestedInput!]
  upsert: [ActivityUpsertWithWhereUniqueNestedInput!]
  delete: [ActivityWhereUniqueInput!]
  connect: [ActivityWhereUniqueInput!]
  set: [ActivityWhereUniqueInput!]
  disconnect: [ActivityWhereUniqueInput!]
  deleteMany: [ActivityScalarWhereInput!]
  updateMany: [ActivityUpdateManyWithWhereNestedInput!]
}

input ActivityUpdateManyMutationInput {
  key: String
  titel: String
  description: String
  grade: ActivityGrade
  icon: String
  tags: ActivityUpdatetagsInput
  isCustom: Boolean
  color: String
}

input ActivityUpdateManyWithWhereNestedInput {
  where: ActivityScalarWhereInput!
  data: ActivityUpdateManyDataInput!
}

input ActivityUpdateOneRequiredInput {
  create: ActivityCreateInput
  update: ActivityUpdateDataInput
  upsert: ActivityUpsertNestedInput
  connect: ActivityWhereUniqueInput
}

input ActivityUpdatetagsInput {
  set: [String!]
}

input ActivityUpdateWithWhereUniqueNestedInput {
  where: ActivityWhereUniqueInput!
  data: ActivityUpdateDataInput!
}

input ActivityUpsertNestedInput {
  update: ActivityUpdateDataInput!
  create: ActivityCreateInput!
}

input ActivityUpsertWithWhereUniqueNestedInput {
  where: ActivityWhereUniqueInput!
  update: ActivityUpdateDataInput!
  create: ActivityCreateInput!
}

input ActivityWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  titel: String
  titel_not: String
  titel_in: [String!]
  titel_not_in: [String!]
  titel_lt: String
  titel_lte: String
  titel_gt: String
  titel_gte: String
  titel_contains: String
  titel_not_contains: String
  titel_starts_with: String
  titel_not_starts_with: String
  titel_ends_with: String
  titel_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  grade: ActivityGrade
  grade_not: ActivityGrade
  grade_in: [ActivityGrade!]
  grade_not_in: [ActivityGrade!]
  icon: String
  icon_not: String
  icon_in: [String!]
  icon_not_in: [String!]
  icon_lt: String
  icon_lte: String
  icon_gt: String
  icon_gte: String
  icon_contains: String
  icon_not_contains: String
  icon_starts_with: String
  icon_not_starts_with: String
  icon_ends_with: String
  icon_not_ends_with: String
  isCustom: Boolean
  isCustom_not: Boolean
  color: String
  color_not: String
  color_in: [String!]
  color_not_in: [String!]
  color_lt: String
  color_lte: String
  color_gt: String
  color_gte: String
  color_contains: String
  color_not_contains: String
  color_starts_with: String
  color_not_starts_with: String
  color_ends_with: String
  color_not_ends_with: String
  AND: [ActivityWhereInput!]
  OR: [ActivityWhereInput!]
  NOT: [ActivityWhereInput!]
}

input ActivityWhereUniqueInput {
  id: ID
  key: String
}

type AggregateActivity {
  count: Int!
}

type AggregateAward {
  count: Int!
}

type AggregateBot {
  count: Int!
}

type AggregateBotSettings {
  count: Int!
}

type AggregateBuddy {
  count: Int!
}

type AggregateBuddyRequest {
  count: Int!
}

type AggregateCalendarEntry {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateChallenge {
  count: Int!
}

type AggregateChallengeCategory {
  count: Int!
}

type AggregateChallengeGroup {
  count: Int!
}

type AggregateChat {
  count: Int!
}

type AggregateChatMessage {
  count: Int!
}

type AggregateChatMessageAttachment {
  count: Int!
}

type AggregateContribution {
  count: Int!
}

type AggregateFavoriteActivity {
  count: Int!
}

type AggregateGlobalSettings {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateGroupColor {
  count: Int!
}

type AggregateInitiator {
  count: Int!
}

type AggregateIpaq {
  count: Int!
}

type AggregateIpaqAnswers {
  count: Int!
}

type AggregateJoinedChallenges {
  count: Int!
}

type AggregatePatient {
  count: Int!
}

type AggregatePatientProfileInfo {
  count: Int!
}

type AggregatePhq9 {
  count: Int!
}

type AggregateProfileActivity {
  count: Int!
}

type AggregateQuestionnaires {
  count: Int!
}

type AggregateScheduledTask {
  count: Int!
}

type AggregateSensorData {
  count: Int!
}

type AggregateTimeSpan {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserSettings {
  count: Int!
}

type AggregateVoting {
  count: Int!
}

type AggregateWebPushNotification {
  count: Int!
}

type AggregateWebPushSettings {
  count: Int!
}

type Award {
  id: ID!
  challengeID: Challenge
  contributionID: Contribution
  votingID: Voting
  createdBy: User
  status: AwardVT
  winner: User
  createdAt: DateTime
  updatedAt: DateTime
}

type AwardConnection {
  pageInfo: PageInfo!
  edges: [AwardEdge]!
  aggregate: AggregateAward!
}

input AwardCreateInput {
  id: ID
  challengeID: ChallengeCreateOneInput
  contributionID: ContributionCreateOneInput
  votingID: VotingCreateOneInput
  createdBy: UserCreateOneInput
  status: AwardVT
  winner: UserCreateOneInput
}

type AwardEdge {
  node: Award!
  cursor: String!
}

enum AwardOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AwardPreviousValues {
  id: ID!
  status: AwardVT
  createdAt: DateTime
  updatedAt: DateTime
}

type AwardSubscriptionPayload {
  mutation: MutationType!
  node: Award
  updatedFields: [String!]
  previousValues: AwardPreviousValues
}

input AwardSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AwardWhereInput
  AND: [AwardSubscriptionWhereInput!]
  OR: [AwardSubscriptionWhereInput!]
  NOT: [AwardSubscriptionWhereInput!]
}

input AwardUpdateInput {
  challengeID: ChallengeUpdateOneInput
  contributionID: ContributionUpdateOneInput
  votingID: VotingUpdateOneInput
  createdBy: UserUpdateOneInput
  status: AwardVT
  winner: UserUpdateOneInput
}

input AwardUpdateManyMutationInput {
  status: AwardVT
}

enum AwardVT {
  GOLD
  SILBER
  BRONZ
}

input AwardWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  challengeID: ChallengeWhereInput
  contributionID: ContributionWhereInput
  votingID: VotingWhereInput
  createdBy: UserWhereInput
  status: AwardVT
  status_not: AwardVT
  status_in: [AwardVT!]
  status_not_in: [AwardVT!]
  winner: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [AwardWhereInput!]
  OR: [AwardWhereInput!]
  NOT: [AwardWhereInput!]
}

input AwardWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type Bot {
  id: ID!
  name: String
  chat: Chat
}

type BotConnection {
  pageInfo: PageInfo!
  edges: [BotEdge]!
  aggregate: AggregateBot!
}

input BotCreateInput {
  id: ID
  name: String
  chat: ChatCreateOneWithoutBotInput
}

input BotCreateOneInput {
  create: BotCreateInput
  connect: BotWhereUniqueInput
}

input BotCreateOneWithoutChatInput {
  create: BotCreateWithoutChatInput
  connect: BotWhereUniqueInput
}

input BotCreateWithoutChatInput {
  id: ID
  name: String
}

type BotEdge {
  node: Bot!
  cursor: String!
}

enum BotOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type BotPreviousValues {
  id: ID!
  name: String
}

type BotSettings {
  id: ID!
  updatedAt: DateTime
  botFirstGreetingText: String
  botFirstGreetingTextDelay: TimeSpan
  botAskCreateActivitiesTime: TimeSpan
  botAskCreateActivitiesMessage: String
  botActivityLessThanPlannedMessage: String
  botActivityLessThanPlannedWeekday: Int
  botAskStartChatIntervall: TimeSpan
  botAskStartChatMessage: String
}

type BotSettingsConnection {
  pageInfo: PageInfo!
  edges: [BotSettingsEdge]!
  aggregate: AggregateBotSettings!
}

input BotSettingsCreateInput {
  id: ID
  botFirstGreetingText: String
  botFirstGreetingTextDelay: TimeSpanCreateOneInput
  botAskCreateActivitiesTime: TimeSpanCreateOneInput
  botAskCreateActivitiesMessage: String
  botActivityLessThanPlannedMessage: String
  botActivityLessThanPlannedWeekday: Int
  botAskStartChatIntervall: TimeSpanCreateOneInput
  botAskStartChatMessage: String
}

input BotSettingsCreateOneInput {
  create: BotSettingsCreateInput
  connect: BotSettingsWhereUniqueInput
}

type BotSettingsEdge {
  node: BotSettings!
  cursor: String!
}

enum BotSettingsOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  botFirstGreetingText_ASC
  botFirstGreetingText_DESC
  botAskCreateActivitiesMessage_ASC
  botAskCreateActivitiesMessage_DESC
  botActivityLessThanPlannedMessage_ASC
  botActivityLessThanPlannedMessage_DESC
  botActivityLessThanPlannedWeekday_ASC
  botActivityLessThanPlannedWeekday_DESC
  botAskStartChatMessage_ASC
  botAskStartChatMessage_DESC
}

type BotSettingsPreviousValues {
  id: ID!
  updatedAt: DateTime
  botFirstGreetingText: String
  botAskCreateActivitiesMessage: String
  botActivityLessThanPlannedMessage: String
  botActivityLessThanPlannedWeekday: Int
  botAskStartChatMessage: String
}

type BotSettingsSubscriptionPayload {
  mutation: MutationType!
  node: BotSettings
  updatedFields: [String!]
  previousValues: BotSettingsPreviousValues
}

input BotSettingsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BotSettingsWhereInput
  AND: [BotSettingsSubscriptionWhereInput!]
  OR: [BotSettingsSubscriptionWhereInput!]
  NOT: [BotSettingsSubscriptionWhereInput!]
}

input BotSettingsUpdateDataInput {
  botFirstGreetingText: String
  botFirstGreetingTextDelay: TimeSpanUpdateOneInput
  botAskCreateActivitiesTime: TimeSpanUpdateOneInput
  botAskCreateActivitiesMessage: String
  botActivityLessThanPlannedMessage: String
  botActivityLessThanPlannedWeekday: Int
  botAskStartChatIntervall: TimeSpanUpdateOneInput
  botAskStartChatMessage: String
}

input BotSettingsUpdateInput {
  botFirstGreetingText: String
  botFirstGreetingTextDelay: TimeSpanUpdateOneInput
  botAskCreateActivitiesTime: TimeSpanUpdateOneInput
  botAskCreateActivitiesMessage: String
  botActivityLessThanPlannedMessage: String
  botActivityLessThanPlannedWeekday: Int
  botAskStartChatIntervall: TimeSpanUpdateOneInput
  botAskStartChatMessage: String
}

input BotSettingsUpdateManyMutationInput {
  botFirstGreetingText: String
  botAskCreateActivitiesMessage: String
  botActivityLessThanPlannedMessage: String
  botActivityLessThanPlannedWeekday: Int
  botAskStartChatMessage: String
}

input BotSettingsUpdateOneInput {
  create: BotSettingsCreateInput
  update: BotSettingsUpdateDataInput
  upsert: BotSettingsUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: BotSettingsWhereUniqueInput
}

input BotSettingsUpsertNestedInput {
  update: BotSettingsUpdateDataInput!
  create: BotSettingsCreateInput!
}

input BotSettingsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  botFirstGreetingText: String
  botFirstGreetingText_not: String
  botFirstGreetingText_in: [String!]
  botFirstGreetingText_not_in: [String!]
  botFirstGreetingText_lt: String
  botFirstGreetingText_lte: String
  botFirstGreetingText_gt: String
  botFirstGreetingText_gte: String
  botFirstGreetingText_contains: String
  botFirstGreetingText_not_contains: String
  botFirstGreetingText_starts_with: String
  botFirstGreetingText_not_starts_with: String
  botFirstGreetingText_ends_with: String
  botFirstGreetingText_not_ends_with: String
  botFirstGreetingTextDelay: TimeSpanWhereInput
  botAskCreateActivitiesTime: TimeSpanWhereInput
  botAskCreateActivitiesMessage: String
  botAskCreateActivitiesMessage_not: String
  botAskCreateActivitiesMessage_in: [String!]
  botAskCreateActivitiesMessage_not_in: [String!]
  botAskCreateActivitiesMessage_lt: String
  botAskCreateActivitiesMessage_lte: String
  botAskCreateActivitiesMessage_gt: String
  botAskCreateActivitiesMessage_gte: String
  botAskCreateActivitiesMessage_contains: String
  botAskCreateActivitiesMessage_not_contains: String
  botAskCreateActivitiesMessage_starts_with: String
  botAskCreateActivitiesMessage_not_starts_with: String
  botAskCreateActivitiesMessage_ends_with: String
  botAskCreateActivitiesMessage_not_ends_with: String
  botActivityLessThanPlannedMessage: String
  botActivityLessThanPlannedMessage_not: String
  botActivityLessThanPlannedMessage_in: [String!]
  botActivityLessThanPlannedMessage_not_in: [String!]
  botActivityLessThanPlannedMessage_lt: String
  botActivityLessThanPlannedMessage_lte: String
  botActivityLessThanPlannedMessage_gt: String
  botActivityLessThanPlannedMessage_gte: String
  botActivityLessThanPlannedMessage_contains: String
  botActivityLessThanPlannedMessage_not_contains: String
  botActivityLessThanPlannedMessage_starts_with: String
  botActivityLessThanPlannedMessage_not_starts_with: String
  botActivityLessThanPlannedMessage_ends_with: String
  botActivityLessThanPlannedMessage_not_ends_with: String
  botActivityLessThanPlannedWeekday: Int
  botActivityLessThanPlannedWeekday_not: Int
  botActivityLessThanPlannedWeekday_in: [Int!]
  botActivityLessThanPlannedWeekday_not_in: [Int!]
  botActivityLessThanPlannedWeekday_lt: Int
  botActivityLessThanPlannedWeekday_lte: Int
  botActivityLessThanPlannedWeekday_gt: Int
  botActivityLessThanPlannedWeekday_gte: Int
  botAskStartChatIntervall: TimeSpanWhereInput
  botAskStartChatMessage: String
  botAskStartChatMessage_not: String
  botAskStartChatMessage_in: [String!]
  botAskStartChatMessage_not_in: [String!]
  botAskStartChatMessage_lt: String
  botAskStartChatMessage_lte: String
  botAskStartChatMessage_gt: String
  botAskStartChatMessage_gte: String
  botAskStartChatMessage_contains: String
  botAskStartChatMessage_not_contains: String
  botAskStartChatMessage_starts_with: String
  botAskStartChatMessage_not_starts_with: String
  botAskStartChatMessage_ends_with: String
  botAskStartChatMessage_not_ends_with: String
  AND: [BotSettingsWhereInput!]
  OR: [BotSettingsWhereInput!]
  NOT: [BotSettingsWhereInput!]
}

input BotSettingsWhereUniqueInput {
  id: ID
}

type BotSubscriptionPayload {
  mutation: MutationType!
  node: Bot
  updatedFields: [String!]
  previousValues: BotPreviousValues
}

input BotSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BotWhereInput
  AND: [BotSubscriptionWhereInput!]
  OR: [BotSubscriptionWhereInput!]
  NOT: [BotSubscriptionWhereInput!]
}

input BotUpdateDataInput {
  name: String
  chat: ChatUpdateOneWithoutBotInput
}

input BotUpdateInput {
  name: String
  chat: ChatUpdateOneWithoutBotInput
}

input BotUpdateManyMutationInput {
  name: String
}

input BotUpdateOneInput {
  create: BotCreateInput
  update: BotUpdateDataInput
  upsert: BotUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: BotWhereUniqueInput
}

input BotUpdateOneWithoutChatInput {
  create: BotCreateWithoutChatInput
  update: BotUpdateWithoutChatDataInput
  upsert: BotUpsertWithoutChatInput
  delete: Boolean
  disconnect: Boolean
  connect: BotWhereUniqueInput
}

input BotUpdateWithoutChatDataInput {
  name: String
}

input BotUpsertNestedInput {
  update: BotUpdateDataInput!
  create: BotCreateInput!
}

input BotUpsertWithoutChatInput {
  update: BotUpdateWithoutChatDataInput!
  create: BotCreateWithoutChatInput!
}

input BotWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  chat: ChatWhereInput
  AND: [BotWhereInput!]
  OR: [BotWhereInput!]
  NOT: [BotWhereInput!]
}

input BotWhereUniqueInput {
  id: ID
}

type Buddy {
  id: ID!
  patient: Patient!
  chat: Chat
}

type BuddyConnection {
  pageInfo: PageInfo!
  edges: [BuddyEdge]!
  aggregate: AggregateBuddy!
}

input BuddyCreateInput {
  id: ID
  patient: PatientCreateOneWithoutBuddyInput!
  chat: ChatCreateOneInput
}

input BuddyCreateOneWithoutPatientInput {
  create: BuddyCreateWithoutPatientInput
  connect: BuddyWhereUniqueInput
}

input BuddyCreateWithoutPatientInput {
  id: ID
  chat: ChatCreateOneInput
}

type BuddyEdge {
  node: Buddy!
  cursor: String!
}

enum BuddyOrderByInput {
  id_ASC
  id_DESC
}

type BuddyPreviousValues {
  id: ID!
}

type BuddyRequest {
  id: ID!
  createdAt: DateTime!
  from: Patient!
  to: Patient
  state: BuddyRequestState
}

type BuddyRequestConnection {
  pageInfo: PageInfo!
  edges: [BuddyRequestEdge]!
  aggregate: AggregateBuddyRequest!
}

input BuddyRequestCreateInput {
  id: ID
  from: PatientCreateOneInput!
  to: PatientCreateOneInput
  state: BuddyRequestState
}

type BuddyRequestEdge {
  node: BuddyRequest!
  cursor: String!
}

enum BuddyRequestOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  state_ASC
  state_DESC
}

type BuddyRequestPreviousValues {
  id: ID!
  createdAt: DateTime!
  state: BuddyRequestState
}

enum BuddyRequestState {
  SEND
  CONFIRMED
  DENIED
  REMOVED
}

type BuddyRequestSubscriptionPayload {
  mutation: MutationType!
  node: BuddyRequest
  updatedFields: [String!]
  previousValues: BuddyRequestPreviousValues
}

input BuddyRequestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BuddyRequestWhereInput
  AND: [BuddyRequestSubscriptionWhereInput!]
  OR: [BuddyRequestSubscriptionWhereInput!]
  NOT: [BuddyRequestSubscriptionWhereInput!]
}

input BuddyRequestUpdateInput {
  from: PatientUpdateOneRequiredInput
  to: PatientUpdateOneInput
  state: BuddyRequestState
}

input BuddyRequestUpdateManyMutationInput {
  state: BuddyRequestState
}

input BuddyRequestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  from: PatientWhereInput
  to: PatientWhereInput
  state: BuddyRequestState
  state_not: BuddyRequestState
  state_in: [BuddyRequestState!]
  state_not_in: [BuddyRequestState!]
  AND: [BuddyRequestWhereInput!]
  OR: [BuddyRequestWhereInput!]
  NOT: [BuddyRequestWhereInput!]
}

input BuddyRequestWhereUniqueInput {
  id: ID
}

type BuddySubscriptionPayload {
  mutation: MutationType!
  node: Buddy
  updatedFields: [String!]
  previousValues: BuddyPreviousValues
}

input BuddySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BuddyWhereInput
  AND: [BuddySubscriptionWhereInput!]
  OR: [BuddySubscriptionWhereInput!]
  NOT: [BuddySubscriptionWhereInput!]
}

input BuddyUpdateInput {
  patient: PatientUpdateOneRequiredWithoutBuddyInput
  chat: ChatUpdateOneInput
}

input BuddyUpdateOneWithoutPatientInput {
  create: BuddyCreateWithoutPatientInput
  update: BuddyUpdateWithoutPatientDataInput
  upsert: BuddyUpsertWithoutPatientInput
  delete: Boolean
  disconnect: Boolean
  connect: BuddyWhereUniqueInput
}

input BuddyUpdateWithoutPatientDataInput {
  chat: ChatUpdateOneInput
}

input BuddyUpsertWithoutPatientInput {
  update: BuddyUpdateWithoutPatientDataInput!
  create: BuddyCreateWithoutPatientInput!
}

input BuddyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  patient: PatientWhereInput
  chat: ChatWhereInput
  AND: [BuddyWhereInput!]
  OR: [BuddyWhereInput!]
  NOT: [BuddyWhereInput!]
}

input BuddyWhereUniqueInput {
  id: ID
}

type CalendarEntry {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  activity: Activity!
  startTime: DateTime!
  endTime: DateTime!
  isDone: Boolean
  isRunning: Boolean
  trackingRequested: Boolean
  patient: Patient
  sensorData(where: SensorDataWhereInput, orderBy: SensorDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorData!]
}

type CalendarEntryConnection {
  pageInfo: PageInfo!
  edges: [CalendarEntryEdge]!
  aggregate: AggregateCalendarEntry!
}

input CalendarEntryCreateInput {
  id: ID
  activity: ActivityCreateOneInput!
  startTime: DateTime!
  endTime: DateTime!
  isDone: Boolean
  isRunning: Boolean
  trackingRequested: Boolean
  patient: PatientCreateOneWithoutCalendarEntriesInput
  sensorData: SensorDataCreateManyInput
}

input CalendarEntryCreateManyWithoutPatientInput {
  create: [CalendarEntryCreateWithoutPatientInput!]
  connect: [CalendarEntryWhereUniqueInput!]
}

input CalendarEntryCreateOneInput {
  create: CalendarEntryCreateInput
  connect: CalendarEntryWhereUniqueInput
}

input CalendarEntryCreateWithoutPatientInput {
  id: ID
  activity: ActivityCreateOneInput!
  startTime: DateTime!
  endTime: DateTime!
  isDone: Boolean
  isRunning: Boolean
  trackingRequested: Boolean
  sensorData: SensorDataCreateManyInput
}

type CalendarEntryEdge {
  node: CalendarEntry!
  cursor: String!
}

enum CalendarEntryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  isDone_ASC
  isDone_DESC
  isRunning_ASC
  isRunning_DESC
  trackingRequested_ASC
  trackingRequested_DESC
}

type CalendarEntryPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  startTime: DateTime!
  endTime: DateTime!
  isDone: Boolean
  isRunning: Boolean
  trackingRequested: Boolean
}

input CalendarEntryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  endTime: DateTime
  endTime_not: DateTime
  endTime_in: [DateTime!]
  endTime_not_in: [DateTime!]
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  isDone: Boolean
  isDone_not: Boolean
  isRunning: Boolean
  isRunning_not: Boolean
  trackingRequested: Boolean
  trackingRequested_not: Boolean
  AND: [CalendarEntryScalarWhereInput!]
  OR: [CalendarEntryScalarWhereInput!]
  NOT: [CalendarEntryScalarWhereInput!]
}

type CalendarEntrySubscriptionPayload {
  mutation: MutationType!
  node: CalendarEntry
  updatedFields: [String!]
  previousValues: CalendarEntryPreviousValues
}

input CalendarEntrySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CalendarEntryWhereInput
  AND: [CalendarEntrySubscriptionWhereInput!]
  OR: [CalendarEntrySubscriptionWhereInput!]
  NOT: [CalendarEntrySubscriptionWhereInput!]
}

input CalendarEntryUpdateDataInput {
  activity: ActivityUpdateOneRequiredInput
  startTime: DateTime
  endTime: DateTime
  isDone: Boolean
  isRunning: Boolean
  trackingRequested: Boolean
  patient: PatientUpdateOneWithoutCalendarEntriesInput
  sensorData: SensorDataUpdateManyInput
}

input CalendarEntryUpdateInput {
  activity: ActivityUpdateOneRequiredInput
  startTime: DateTime
  endTime: DateTime
  isDone: Boolean
  isRunning: Boolean
  trackingRequested: Boolean
  patient: PatientUpdateOneWithoutCalendarEntriesInput
  sensorData: SensorDataUpdateManyInput
}

input CalendarEntryUpdateManyDataInput {
  startTime: DateTime
  endTime: DateTime
  isDone: Boolean
  isRunning: Boolean
  trackingRequested: Boolean
}

input CalendarEntryUpdateManyMutationInput {
  startTime: DateTime
  endTime: DateTime
  isDone: Boolean
  isRunning: Boolean
  trackingRequested: Boolean
}

input CalendarEntryUpdateManyWithoutPatientInput {
  create: [CalendarEntryCreateWithoutPatientInput!]
  delete: [CalendarEntryWhereUniqueInput!]
  connect: [CalendarEntryWhereUniqueInput!]
  set: [CalendarEntryWhereUniqueInput!]
  disconnect: [CalendarEntryWhereUniqueInput!]
  update: [CalendarEntryUpdateWithWhereUniqueWithoutPatientInput!]
  upsert: [CalendarEntryUpsertWithWhereUniqueWithoutPatientInput!]
  deleteMany: [CalendarEntryScalarWhereInput!]
  updateMany: [CalendarEntryUpdateManyWithWhereNestedInput!]
}

input CalendarEntryUpdateManyWithWhereNestedInput {
  where: CalendarEntryScalarWhereInput!
  data: CalendarEntryUpdateManyDataInput!
}

input CalendarEntryUpdateOneInput {
  create: CalendarEntryCreateInput
  update: CalendarEntryUpdateDataInput
  upsert: CalendarEntryUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CalendarEntryWhereUniqueInput
}

input CalendarEntryUpdateWithoutPatientDataInput {
  activity: ActivityUpdateOneRequiredInput
  startTime: DateTime
  endTime: DateTime
  isDone: Boolean
  isRunning: Boolean
  trackingRequested: Boolean
  sensorData: SensorDataUpdateManyInput
}

input CalendarEntryUpdateWithWhereUniqueWithoutPatientInput {
  where: CalendarEntryWhereUniqueInput!
  data: CalendarEntryUpdateWithoutPatientDataInput!
}

input CalendarEntryUpsertNestedInput {
  update: CalendarEntryUpdateDataInput!
  create: CalendarEntryCreateInput!
}

input CalendarEntryUpsertWithWhereUniqueWithoutPatientInput {
  where: CalendarEntryWhereUniqueInput!
  update: CalendarEntryUpdateWithoutPatientDataInput!
  create: CalendarEntryCreateWithoutPatientInput!
}

input CalendarEntryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  activity: ActivityWhereInput
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  endTime: DateTime
  endTime_not: DateTime
  endTime_in: [DateTime!]
  endTime_not_in: [DateTime!]
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  isDone: Boolean
  isDone_not: Boolean
  isRunning: Boolean
  isRunning_not: Boolean
  trackingRequested: Boolean
  trackingRequested_not: Boolean
  patient: PatientWhereInput
  sensorData_every: SensorDataWhereInput
  sensorData_some: SensorDataWhereInput
  sensorData_none: SensorDataWhereInput
  AND: [CalendarEntryWhereInput!]
  OR: [CalendarEntryWhereInput!]
  NOT: [CalendarEntryWhereInput!]
}

input CalendarEntryWhereUniqueInput {
  id: ID
}

type Category {
  id: ID!
  title: String!
  description: String!
  createdAt: DateTime
  updatedAt: DateTime
  challenge(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge!]
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  title: String!
  description: String!
  challenge: ChallengeCreateManyWithoutCategoryInput
}

input CategoryCreateManyWithoutChallengeInput {
  create: [CategoryCreateWithoutChallengeInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateWithoutChallengeInput {
  id: ID
  title: String!
  description: String!
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  title: String!
  description: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  NOT: [CategoryScalarWhereInput!]
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  NOT: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateInput {
  title: String
  description: String
  challenge: ChallengeUpdateManyWithoutCategoryInput
}

input CategoryUpdateManyDataInput {
  title: String
  description: String
}

input CategoryUpdateManyMutationInput {
  title: String
  description: String
}

input CategoryUpdateManyWithoutChallengeInput {
  create: [CategoryCreateWithoutChallengeInput!]
  delete: [CategoryWhereUniqueInput!]
  connect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutChallengeInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutChallengeInput!]
  deleteMany: [CategoryScalarWhereInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
}

input CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput!
  data: CategoryUpdateManyDataInput!
}

input CategoryUpdateWithoutChallengeDataInput {
  title: String
  description: String
}

input CategoryUpdateWithWhereUniqueWithoutChallengeInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateWithoutChallengeDataInput!
}

input CategoryUpsertWithWhereUniqueWithoutChallengeInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateWithoutChallengeDataInput!
  create: CategoryCreateWithoutChallengeInput!
}

input CategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  challenge_every: ChallengeWhereInput
  challenge_some: ChallengeWhereInput
  challenge_none: ChallengeWhereInput
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input CategoryWhereUniqueInput {
  id: ID
  title: String
}

type Challenge {
  id: ID!
  title: String!
  description: String!
  image: String!
  premium: String
  timeEnd: DateTime
  emailSend: String
  jury(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  group(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  category(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  status: StatusChallegen
  initiator: String!
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
}

type ChallengeCategory {
  id: ID!
  challegeId: Challenge
  categoryID: Group
}

type ChallengeCategoryConnection {
  pageInfo: PageInfo!
  edges: [ChallengeCategoryEdge]!
  aggregate: AggregateChallengeCategory!
}

input ChallengeCategoryCreateInput {
  id: ID
  challegeId: ChallengeCreateOneInput
  categoryID: GroupCreateOneInput
}

type ChallengeCategoryEdge {
  node: ChallengeCategory!
  cursor: String!
}

enum ChallengeCategoryOrderByInput {
  id_ASC
  id_DESC
}

type ChallengeCategoryPreviousValues {
  id: ID!
}

type ChallengeCategorySubscriptionPayload {
  mutation: MutationType!
  node: ChallengeCategory
  updatedFields: [String!]
  previousValues: ChallengeCategoryPreviousValues
}

input ChallengeCategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChallengeCategoryWhereInput
  AND: [ChallengeCategorySubscriptionWhereInput!]
  OR: [ChallengeCategorySubscriptionWhereInput!]
  NOT: [ChallengeCategorySubscriptionWhereInput!]
}

input ChallengeCategoryUpdateInput {
  challegeId: ChallengeUpdateOneInput
  categoryID: GroupUpdateOneInput
}

input ChallengeCategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  challegeId: ChallengeWhereInput
  categoryID: GroupWhereInput
  AND: [ChallengeCategoryWhereInput!]
  OR: [ChallengeCategoryWhereInput!]
  NOT: [ChallengeCategoryWhereInput!]
}

input ChallengeCategoryWhereUniqueInput {
  id: ID
}

type ChallengeConnection {
  pageInfo: PageInfo!
  edges: [ChallengeEdge]!
  aggregate: AggregateChallenge!
}

input ChallengeCreateInput {
  id: ID
  title: String!
  description: String!
  image: String!
  premium: String
  timeEnd: DateTime
  emailSend: String
  jury: UserCreateManyInput
  group: GroupCreateManyWithoutChallengeInput
  category: CategoryCreateManyWithoutChallengeInput
  status: StatusChallegen
  initiator: String!
  createdBy: UserCreateOneInput
}

input ChallengeCreateManyWithoutCategoryInput {
  create: [ChallengeCreateWithoutCategoryInput!]
  connect: [ChallengeWhereUniqueInput!]
}

input ChallengeCreateManyWithoutGroupInput {
  create: [ChallengeCreateWithoutGroupInput!]
  connect: [ChallengeWhereUniqueInput!]
}

input ChallengeCreateOneInput {
  create: ChallengeCreateInput
  connect: ChallengeWhereUniqueInput
}

input ChallengeCreateWithoutCategoryInput {
  id: ID
  title: String!
  description: String!
  image: String!
  premium: String
  timeEnd: DateTime
  emailSend: String
  jury: UserCreateManyInput
  group: GroupCreateManyWithoutChallengeInput
  status: StatusChallegen
  initiator: String!
  createdBy: UserCreateOneInput
}

input ChallengeCreateWithoutGroupInput {
  id: ID
  title: String!
  description: String!
  image: String!
  premium: String
  timeEnd: DateTime
  emailSend: String
  jury: UserCreateManyInput
  category: CategoryCreateManyWithoutChallengeInput
  status: StatusChallegen
  initiator: String!
  createdBy: UserCreateOneInput
}

type ChallengeEdge {
  node: Challenge!
  cursor: String!
}

type ChallengeGroup {
  id: ID!
  challegeId: Challenge
  groupID: Group
}

type ChallengeGroupConnection {
  pageInfo: PageInfo!
  edges: [ChallengeGroupEdge]!
  aggregate: AggregateChallengeGroup!
}

input ChallengeGroupCreateInput {
  id: ID
  challegeId: ChallengeCreateOneInput
  groupID: GroupCreateOneInput
}

type ChallengeGroupEdge {
  node: ChallengeGroup!
  cursor: String!
}

enum ChallengeGroupOrderByInput {
  id_ASC
  id_DESC
}

type ChallengeGroupPreviousValues {
  id: ID!
}

type ChallengeGroupSubscriptionPayload {
  mutation: MutationType!
  node: ChallengeGroup
  updatedFields: [String!]
  previousValues: ChallengeGroupPreviousValues
}

input ChallengeGroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChallengeGroupWhereInput
  AND: [ChallengeGroupSubscriptionWhereInput!]
  OR: [ChallengeGroupSubscriptionWhereInput!]
  NOT: [ChallengeGroupSubscriptionWhereInput!]
}

input ChallengeGroupUpdateInput {
  challegeId: ChallengeUpdateOneInput
  groupID: GroupUpdateOneInput
}

input ChallengeGroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  challegeId: ChallengeWhereInput
  groupID: GroupWhereInput
  AND: [ChallengeGroupWhereInput!]
  OR: [ChallengeGroupWhereInput!]
  NOT: [ChallengeGroupWhereInput!]
}

input ChallengeGroupWhereUniqueInput {
  id: ID
}

enum ChallengeOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  image_ASC
  image_DESC
  premium_ASC
  premium_DESC
  timeEnd_ASC
  timeEnd_DESC
  emailSend_ASC
  emailSend_DESC
  status_ASC
  status_DESC
  initiator_ASC
  initiator_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ChallengePreviousValues {
  id: ID!
  title: String!
  description: String!
  image: String!
  premium: String
  timeEnd: DateTime
  emailSend: String
  status: StatusChallegen
  initiator: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input ChallengeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  premium: String
  premium_not: String
  premium_in: [String!]
  premium_not_in: [String!]
  premium_lt: String
  premium_lte: String
  premium_gt: String
  premium_gte: String
  premium_contains: String
  premium_not_contains: String
  premium_starts_with: String
  premium_not_starts_with: String
  premium_ends_with: String
  premium_not_ends_with: String
  timeEnd: DateTime
  timeEnd_not: DateTime
  timeEnd_in: [DateTime!]
  timeEnd_not_in: [DateTime!]
  timeEnd_lt: DateTime
  timeEnd_lte: DateTime
  timeEnd_gt: DateTime
  timeEnd_gte: DateTime
  emailSend: String
  emailSend_not: String
  emailSend_in: [String!]
  emailSend_not_in: [String!]
  emailSend_lt: String
  emailSend_lte: String
  emailSend_gt: String
  emailSend_gte: String
  emailSend_contains: String
  emailSend_not_contains: String
  emailSend_starts_with: String
  emailSend_not_starts_with: String
  emailSend_ends_with: String
  emailSend_not_ends_with: String
  status: StatusChallegen
  status_not: StatusChallegen
  status_in: [StatusChallegen!]
  status_not_in: [StatusChallegen!]
  initiator: String
  initiator_not: String
  initiator_in: [String!]
  initiator_not_in: [String!]
  initiator_lt: String
  initiator_lte: String
  initiator_gt: String
  initiator_gte: String
  initiator_contains: String
  initiator_not_contains: String
  initiator_starts_with: String
  initiator_not_starts_with: String
  initiator_ends_with: String
  initiator_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ChallengeScalarWhereInput!]
  OR: [ChallengeScalarWhereInput!]
  NOT: [ChallengeScalarWhereInput!]
}

type ChallengeSubscriptionPayload {
  mutation: MutationType!
  node: Challenge
  updatedFields: [String!]
  previousValues: ChallengePreviousValues
}

input ChallengeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChallengeWhereInput
  AND: [ChallengeSubscriptionWhereInput!]
  OR: [ChallengeSubscriptionWhereInput!]
  NOT: [ChallengeSubscriptionWhereInput!]
}

input ChallengeUpdateDataInput {
  title: String
  description: String
  image: String
  premium: String
  timeEnd: DateTime
  emailSend: String
  jury: UserUpdateManyInput
  group: GroupUpdateManyWithoutChallengeInput
  category: CategoryUpdateManyWithoutChallengeInput
  status: StatusChallegen
  initiator: String
  createdBy: UserUpdateOneInput
}

input ChallengeUpdateInput {
  title: String
  description: String
  image: String
  premium: String
  timeEnd: DateTime
  emailSend: String
  jury: UserUpdateManyInput
  group: GroupUpdateManyWithoutChallengeInput
  category: CategoryUpdateManyWithoutChallengeInput
  status: StatusChallegen
  initiator: String
  createdBy: UserUpdateOneInput
}

input ChallengeUpdateManyDataInput {
  title: String
  description: String
  image: String
  premium: String
  timeEnd: DateTime
  emailSend: String
  status: StatusChallegen
  initiator: String
}

input ChallengeUpdateManyMutationInput {
  title: String
  description: String
  image: String
  premium: String
  timeEnd: DateTime
  emailSend: String
  status: StatusChallegen
  initiator: String
}

input ChallengeUpdateManyWithoutCategoryInput {
  create: [ChallengeCreateWithoutCategoryInput!]
  delete: [ChallengeWhereUniqueInput!]
  connect: [ChallengeWhereUniqueInput!]
  set: [ChallengeWhereUniqueInput!]
  disconnect: [ChallengeWhereUniqueInput!]
  update: [ChallengeUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [ChallengeUpsertWithWhereUniqueWithoutCategoryInput!]
  deleteMany: [ChallengeScalarWhereInput!]
  updateMany: [ChallengeUpdateManyWithWhereNestedInput!]
}

input ChallengeUpdateManyWithoutGroupInput {
  create: [ChallengeCreateWithoutGroupInput!]
  delete: [ChallengeWhereUniqueInput!]
  connect: [ChallengeWhereUniqueInput!]
  set: [ChallengeWhereUniqueInput!]
  disconnect: [ChallengeWhereUniqueInput!]
  update: [ChallengeUpdateWithWhereUniqueWithoutGroupInput!]
  upsert: [ChallengeUpsertWithWhereUniqueWithoutGroupInput!]
  deleteMany: [ChallengeScalarWhereInput!]
  updateMany: [ChallengeUpdateManyWithWhereNestedInput!]
}

input ChallengeUpdateManyWithWhereNestedInput {
  where: ChallengeScalarWhereInput!
  data: ChallengeUpdateManyDataInput!
}

input ChallengeUpdateOneInput {
  create: ChallengeCreateInput
  update: ChallengeUpdateDataInput
  upsert: ChallengeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ChallengeWhereUniqueInput
}

input ChallengeUpdateWithoutCategoryDataInput {
  title: String
  description: String
  image: String
  premium: String
  timeEnd: DateTime
  emailSend: String
  jury: UserUpdateManyInput
  group: GroupUpdateManyWithoutChallengeInput
  status: StatusChallegen
  initiator: String
  createdBy: UserUpdateOneInput
}

input ChallengeUpdateWithoutGroupDataInput {
  title: String
  description: String
  image: String
  premium: String
  timeEnd: DateTime
  emailSend: String
  jury: UserUpdateManyInput
  category: CategoryUpdateManyWithoutChallengeInput
  status: StatusChallegen
  initiator: String
  createdBy: UserUpdateOneInput
}

input ChallengeUpdateWithWhereUniqueWithoutCategoryInput {
  where: ChallengeWhereUniqueInput!
  data: ChallengeUpdateWithoutCategoryDataInput!
}

input ChallengeUpdateWithWhereUniqueWithoutGroupInput {
  where: ChallengeWhereUniqueInput!
  data: ChallengeUpdateWithoutGroupDataInput!
}

input ChallengeUpsertNestedInput {
  update: ChallengeUpdateDataInput!
  create: ChallengeCreateInput!
}

input ChallengeUpsertWithWhereUniqueWithoutCategoryInput {
  where: ChallengeWhereUniqueInput!
  update: ChallengeUpdateWithoutCategoryDataInput!
  create: ChallengeCreateWithoutCategoryInput!
}

input ChallengeUpsertWithWhereUniqueWithoutGroupInput {
  where: ChallengeWhereUniqueInput!
  update: ChallengeUpdateWithoutGroupDataInput!
  create: ChallengeCreateWithoutGroupInput!
}

input ChallengeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  premium: String
  premium_not: String
  premium_in: [String!]
  premium_not_in: [String!]
  premium_lt: String
  premium_lte: String
  premium_gt: String
  premium_gte: String
  premium_contains: String
  premium_not_contains: String
  premium_starts_with: String
  premium_not_starts_with: String
  premium_ends_with: String
  premium_not_ends_with: String
  timeEnd: DateTime
  timeEnd_not: DateTime
  timeEnd_in: [DateTime!]
  timeEnd_not_in: [DateTime!]
  timeEnd_lt: DateTime
  timeEnd_lte: DateTime
  timeEnd_gt: DateTime
  timeEnd_gte: DateTime
  emailSend: String
  emailSend_not: String
  emailSend_in: [String!]
  emailSend_not_in: [String!]
  emailSend_lt: String
  emailSend_lte: String
  emailSend_gt: String
  emailSend_gte: String
  emailSend_contains: String
  emailSend_not_contains: String
  emailSend_starts_with: String
  emailSend_not_starts_with: String
  emailSend_ends_with: String
  emailSend_not_ends_with: String
  jury_every: UserWhereInput
  jury_some: UserWhereInput
  jury_none: UserWhereInput
  group_every: GroupWhereInput
  group_some: GroupWhereInput
  group_none: GroupWhereInput
  category_every: CategoryWhereInput
  category_some: CategoryWhereInput
  category_none: CategoryWhereInput
  status: StatusChallegen
  status_not: StatusChallegen
  status_in: [StatusChallegen!]
  status_not_in: [StatusChallegen!]
  initiator: String
  initiator_not: String
  initiator_in: [String!]
  initiator_not_in: [String!]
  initiator_lt: String
  initiator_lte: String
  initiator_gt: String
  initiator_gte: String
  initiator_contains: String
  initiator_not_contains: String
  initiator_starts_with: String
  initiator_not_starts_with: String
  initiator_ends_with: String
  initiator_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdBy: UserWhereInput
  AND: [ChallengeWhereInput!]
  OR: [ChallengeWhereInput!]
  NOT: [ChallengeWhereInput!]
}

input ChallengeWhereUniqueInput {
  id: ID
  title: String
}

type Chat {
  id: ID!
  messages(where: ChatMessageWhereInput, orderBy: ChatMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatMessage!]
  bot: Bot
}

type ChatConnection {
  pageInfo: PageInfo!
  edges: [ChatEdge]!
  aggregate: AggregateChat!
}

input ChatCreateInput {
  id: ID
  messages: ChatMessageCreateManyWithoutChatInput
  bot: BotCreateOneWithoutChatInput
}

input ChatCreateOneInput {
  create: ChatCreateInput
  connect: ChatWhereUniqueInput
}

input ChatCreateOneWithoutBotInput {
  create: ChatCreateWithoutBotInput
  connect: ChatWhereUniqueInput
}

input ChatCreateOneWithoutMessagesInput {
  create: ChatCreateWithoutMessagesInput
  connect: ChatWhereUniqueInput
}

input ChatCreateWithoutBotInput {
  id: ID
  messages: ChatMessageCreateManyWithoutChatInput
}

input ChatCreateWithoutMessagesInput {
  id: ID
  bot: BotCreateOneWithoutChatInput
}

type ChatEdge {
  node: Chat!
  cursor: String!
}

type ChatMessage {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  chat: Chat
  text: String
  author: User
  authorBot: Bot
  attachment: ChatMessageAttachment
}

type ChatMessageAttachment {
  id: ID!
  calendarEntry: CalendarEntry
  originalCalendarEntryId: ID
  ownerId: ID
  chatMessage: ChatMessage!
}

type ChatMessageAttachmentConnection {
  pageInfo: PageInfo!
  edges: [ChatMessageAttachmentEdge]!
  aggregate: AggregateChatMessageAttachment!
}

input ChatMessageAttachmentCreateInput {
  id: ID
  calendarEntry: CalendarEntryCreateOneInput
  originalCalendarEntryId: ID
  ownerId: ID
  chatMessage: ChatMessageCreateOneWithoutAttachmentInput!
}

input ChatMessageAttachmentCreateOneWithoutChatMessageInput {
  create: ChatMessageAttachmentCreateWithoutChatMessageInput
  connect: ChatMessageAttachmentWhereUniqueInput
}

input ChatMessageAttachmentCreateWithoutChatMessageInput {
  id: ID
  calendarEntry: CalendarEntryCreateOneInput
  originalCalendarEntryId: ID
  ownerId: ID
}

type ChatMessageAttachmentEdge {
  node: ChatMessageAttachment!
  cursor: String!
}

enum ChatMessageAttachmentOrderByInput {
  id_ASC
  id_DESC
  originalCalendarEntryId_ASC
  originalCalendarEntryId_DESC
  ownerId_ASC
  ownerId_DESC
}

type ChatMessageAttachmentPreviousValues {
  id: ID!
  originalCalendarEntryId: ID
  ownerId: ID
}

type ChatMessageAttachmentSubscriptionPayload {
  mutation: MutationType!
  node: ChatMessageAttachment
  updatedFields: [String!]
  previousValues: ChatMessageAttachmentPreviousValues
}

input ChatMessageAttachmentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChatMessageAttachmentWhereInput
  AND: [ChatMessageAttachmentSubscriptionWhereInput!]
  OR: [ChatMessageAttachmentSubscriptionWhereInput!]
  NOT: [ChatMessageAttachmentSubscriptionWhereInput!]
}

input ChatMessageAttachmentUpdateInput {
  calendarEntry: CalendarEntryUpdateOneInput
  originalCalendarEntryId: ID
  ownerId: ID
  chatMessage: ChatMessageUpdateOneRequiredWithoutAttachmentInput
}

input ChatMessageAttachmentUpdateManyMutationInput {
  originalCalendarEntryId: ID
  ownerId: ID
}

input ChatMessageAttachmentUpdateOneWithoutChatMessageInput {
  create: ChatMessageAttachmentCreateWithoutChatMessageInput
  update: ChatMessageAttachmentUpdateWithoutChatMessageDataInput
  upsert: ChatMessageAttachmentUpsertWithoutChatMessageInput
  delete: Boolean
  disconnect: Boolean
  connect: ChatMessageAttachmentWhereUniqueInput
}

input ChatMessageAttachmentUpdateWithoutChatMessageDataInput {
  calendarEntry: CalendarEntryUpdateOneInput
  originalCalendarEntryId: ID
  ownerId: ID
}

input ChatMessageAttachmentUpsertWithoutChatMessageInput {
  update: ChatMessageAttachmentUpdateWithoutChatMessageDataInput!
  create: ChatMessageAttachmentCreateWithoutChatMessageInput!
}

input ChatMessageAttachmentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  calendarEntry: CalendarEntryWhereInput
  originalCalendarEntryId: ID
  originalCalendarEntryId_not: ID
  originalCalendarEntryId_in: [ID!]
  originalCalendarEntryId_not_in: [ID!]
  originalCalendarEntryId_lt: ID
  originalCalendarEntryId_lte: ID
  originalCalendarEntryId_gt: ID
  originalCalendarEntryId_gte: ID
  originalCalendarEntryId_contains: ID
  originalCalendarEntryId_not_contains: ID
  originalCalendarEntryId_starts_with: ID
  originalCalendarEntryId_not_starts_with: ID
  originalCalendarEntryId_ends_with: ID
  originalCalendarEntryId_not_ends_with: ID
  ownerId: ID
  ownerId_not: ID
  ownerId_in: [ID!]
  ownerId_not_in: [ID!]
  ownerId_lt: ID
  ownerId_lte: ID
  ownerId_gt: ID
  ownerId_gte: ID
  ownerId_contains: ID
  ownerId_not_contains: ID
  ownerId_starts_with: ID
  ownerId_not_starts_with: ID
  ownerId_ends_with: ID
  ownerId_not_ends_with: ID
  chatMessage: ChatMessageWhereInput
  AND: [ChatMessageAttachmentWhereInput!]
  OR: [ChatMessageAttachmentWhereInput!]
  NOT: [ChatMessageAttachmentWhereInput!]
}

input ChatMessageAttachmentWhereUniqueInput {
  id: ID
}

type ChatMessageConnection {
  pageInfo: PageInfo!
  edges: [ChatMessageEdge]!
  aggregate: AggregateChatMessage!
}

input ChatMessageCreateInput {
  id: ID
  chat: ChatCreateOneWithoutMessagesInput
  text: String
  author: UserCreateOneInput
  authorBot: BotCreateOneInput
  attachment: ChatMessageAttachmentCreateOneWithoutChatMessageInput
}

input ChatMessageCreateManyWithoutChatInput {
  create: [ChatMessageCreateWithoutChatInput!]
  connect: [ChatMessageWhereUniqueInput!]
}

input ChatMessageCreateOneWithoutAttachmentInput {
  create: ChatMessageCreateWithoutAttachmentInput
  connect: ChatMessageWhereUniqueInput
}

input ChatMessageCreateWithoutAttachmentInput {
  id: ID
  chat: ChatCreateOneWithoutMessagesInput
  text: String
  author: UserCreateOneInput
  authorBot: BotCreateOneInput
}

input ChatMessageCreateWithoutChatInput {
  id: ID
  text: String
  author: UserCreateOneInput
  authorBot: BotCreateOneInput
  attachment: ChatMessageAttachmentCreateOneWithoutChatMessageInput
}

type ChatMessageEdge {
  node: ChatMessage!
  cursor: String!
}

enum ChatMessageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  text_ASC
  text_DESC
}

type ChatMessagePreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  text: String
}

input ChatMessageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  AND: [ChatMessageScalarWhereInput!]
  OR: [ChatMessageScalarWhereInput!]
  NOT: [ChatMessageScalarWhereInput!]
}

type ChatMessageSubscriptionPayload {
  mutation: MutationType!
  node: ChatMessage
  updatedFields: [String!]
  previousValues: ChatMessagePreviousValues
}

input ChatMessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChatMessageWhereInput
  AND: [ChatMessageSubscriptionWhereInput!]
  OR: [ChatMessageSubscriptionWhereInput!]
  NOT: [ChatMessageSubscriptionWhereInput!]
}

input ChatMessageUpdateInput {
  chat: ChatUpdateOneWithoutMessagesInput
  text: String
  author: UserUpdateOneInput
  authorBot: BotUpdateOneInput
  attachment: ChatMessageAttachmentUpdateOneWithoutChatMessageInput
}

input ChatMessageUpdateManyDataInput {
  text: String
}

input ChatMessageUpdateManyMutationInput {
  text: String
}

input ChatMessageUpdateManyWithoutChatInput {
  create: [ChatMessageCreateWithoutChatInput!]
  delete: [ChatMessageWhereUniqueInput!]
  connect: [ChatMessageWhereUniqueInput!]
  set: [ChatMessageWhereUniqueInput!]
  disconnect: [ChatMessageWhereUniqueInput!]
  update: [ChatMessageUpdateWithWhereUniqueWithoutChatInput!]
  upsert: [ChatMessageUpsertWithWhereUniqueWithoutChatInput!]
  deleteMany: [ChatMessageScalarWhereInput!]
  updateMany: [ChatMessageUpdateManyWithWhereNestedInput!]
}

input ChatMessageUpdateManyWithWhereNestedInput {
  where: ChatMessageScalarWhereInput!
  data: ChatMessageUpdateManyDataInput!
}

input ChatMessageUpdateOneRequiredWithoutAttachmentInput {
  create: ChatMessageCreateWithoutAttachmentInput
  update: ChatMessageUpdateWithoutAttachmentDataInput
  upsert: ChatMessageUpsertWithoutAttachmentInput
  connect: ChatMessageWhereUniqueInput
}

input ChatMessageUpdateWithoutAttachmentDataInput {
  chat: ChatUpdateOneWithoutMessagesInput
  text: String
  author: UserUpdateOneInput
  authorBot: BotUpdateOneInput
}

input ChatMessageUpdateWithoutChatDataInput {
  text: String
  author: UserUpdateOneInput
  authorBot: BotUpdateOneInput
  attachment: ChatMessageAttachmentUpdateOneWithoutChatMessageInput
}

input ChatMessageUpdateWithWhereUniqueWithoutChatInput {
  where: ChatMessageWhereUniqueInput!
  data: ChatMessageUpdateWithoutChatDataInput!
}

input ChatMessageUpsertWithoutAttachmentInput {
  update: ChatMessageUpdateWithoutAttachmentDataInput!
  create: ChatMessageCreateWithoutAttachmentInput!
}

input ChatMessageUpsertWithWhereUniqueWithoutChatInput {
  where: ChatMessageWhereUniqueInput!
  update: ChatMessageUpdateWithoutChatDataInput!
  create: ChatMessageCreateWithoutChatInput!
}

input ChatMessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  chat: ChatWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  author: UserWhereInput
  authorBot: BotWhereInput
  attachment: ChatMessageAttachmentWhereInput
  AND: [ChatMessageWhereInput!]
  OR: [ChatMessageWhereInput!]
  NOT: [ChatMessageWhereInput!]
}

input ChatMessageWhereUniqueInput {
  id: ID
}

enum ChatOrderByInput {
  id_ASC
  id_DESC
}

type ChatPreviousValues {
  id: ID!
}

type ChatSubscriptionPayload {
  mutation: MutationType!
  node: Chat
  updatedFields: [String!]
  previousValues: ChatPreviousValues
}

input ChatSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChatWhereInput
  AND: [ChatSubscriptionWhereInput!]
  OR: [ChatSubscriptionWhereInput!]
  NOT: [ChatSubscriptionWhereInput!]
}

input ChatUpdateDataInput {
  messages: ChatMessageUpdateManyWithoutChatInput
  bot: BotUpdateOneWithoutChatInput
}

input ChatUpdateInput {
  messages: ChatMessageUpdateManyWithoutChatInput
  bot: BotUpdateOneWithoutChatInput
}

input ChatUpdateOneInput {
  create: ChatCreateInput
  update: ChatUpdateDataInput
  upsert: ChatUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ChatWhereUniqueInput
}

input ChatUpdateOneWithoutBotInput {
  create: ChatCreateWithoutBotInput
  update: ChatUpdateWithoutBotDataInput
  upsert: ChatUpsertWithoutBotInput
  delete: Boolean
  disconnect: Boolean
  connect: ChatWhereUniqueInput
}

input ChatUpdateOneWithoutMessagesInput {
  create: ChatCreateWithoutMessagesInput
  update: ChatUpdateWithoutMessagesDataInput
  upsert: ChatUpsertWithoutMessagesInput
  delete: Boolean
  disconnect: Boolean
  connect: ChatWhereUniqueInput
}

input ChatUpdateWithoutBotDataInput {
  messages: ChatMessageUpdateManyWithoutChatInput
}

input ChatUpdateWithoutMessagesDataInput {
  bot: BotUpdateOneWithoutChatInput
}

input ChatUpsertNestedInput {
  update: ChatUpdateDataInput!
  create: ChatCreateInput!
}

input ChatUpsertWithoutBotInput {
  update: ChatUpdateWithoutBotDataInput!
  create: ChatCreateWithoutBotInput!
}

input ChatUpsertWithoutMessagesInput {
  update: ChatUpdateWithoutMessagesDataInput!
  create: ChatCreateWithoutMessagesInput!
}

input ChatWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  messages_every: ChatMessageWhereInput
  messages_some: ChatMessageWhereInput
  messages_none: ChatMessageWhereInput
  bot: BotWhereInput
  AND: [ChatWhereInput!]
  OR: [ChatWhereInput!]
  NOT: [ChatWhereInput!]
}

input ChatWhereUniqueInput {
  id: ID
}

type Contribution {
  id: ID!
  challengeID: Challenge
  title: String!
  description: String
  image: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
}

type ContributionConnection {
  pageInfo: PageInfo!
  edges: [ContributionEdge]!
  aggregate: AggregateContribution!
}

input ContributionCreateInput {
  id: ID
  challengeID: ChallengeCreateOneInput
  title: String!
  description: String
  image: String
  createdBy: UserCreateOneInput
}

input ContributionCreateOneInput {
  create: ContributionCreateInput
  connect: ContributionWhereUniqueInput
}

type ContributionEdge {
  node: Contribution!
  cursor: String!
}

enum ContributionOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  image_ASC
  image_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContributionPreviousValues {
  id: ID!
  title: String!
  description: String
  image: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ContributionSubscriptionPayload {
  mutation: MutationType!
  node: Contribution
  updatedFields: [String!]
  previousValues: ContributionPreviousValues
}

input ContributionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ContributionWhereInput
  AND: [ContributionSubscriptionWhereInput!]
  OR: [ContributionSubscriptionWhereInput!]
  NOT: [ContributionSubscriptionWhereInput!]
}

input ContributionUpdateDataInput {
  challengeID: ChallengeUpdateOneInput
  title: String
  description: String
  image: String
  createdBy: UserUpdateOneInput
}

input ContributionUpdateInput {
  challengeID: ChallengeUpdateOneInput
  title: String
  description: String
  image: String
  createdBy: UserUpdateOneInput
}

input ContributionUpdateManyMutationInput {
  title: String
  description: String
  image: String
}

input ContributionUpdateOneInput {
  create: ContributionCreateInput
  update: ContributionUpdateDataInput
  upsert: ContributionUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ContributionWhereUniqueInput
}

input ContributionUpsertNestedInput {
  update: ContributionUpdateDataInput!
  create: ContributionCreateInput!
}

input ContributionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  challengeID: ChallengeWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdBy: UserWhereInput
  AND: [ContributionWhereInput!]
  OR: [ContributionWhereInput!]
  NOT: [ContributionWhereInput!]
}

input ContributionWhereUniqueInput {
  id: ID
}

scalar DateTime

type FavoriteActivity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  activityKey: String!
}

type FavoriteActivityConnection {
  pageInfo: PageInfo!
  edges: [FavoriteActivityEdge]!
  aggregate: AggregateFavoriteActivity!
}

input FavoriteActivityCreateInput {
  id: ID
  activityKey: String!
}

input FavoriteActivityCreateManyInput {
  create: [FavoriteActivityCreateInput!]
  connect: [FavoriteActivityWhereUniqueInput!]
}

type FavoriteActivityEdge {
  node: FavoriteActivity!
  cursor: String!
}

enum FavoriteActivityOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  activityKey_ASC
  activityKey_DESC
}

type FavoriteActivityPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  activityKey: String!
}

input FavoriteActivityScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  activityKey: String
  activityKey_not: String
  activityKey_in: [String!]
  activityKey_not_in: [String!]
  activityKey_lt: String
  activityKey_lte: String
  activityKey_gt: String
  activityKey_gte: String
  activityKey_contains: String
  activityKey_not_contains: String
  activityKey_starts_with: String
  activityKey_not_starts_with: String
  activityKey_ends_with: String
  activityKey_not_ends_with: String
  AND: [FavoriteActivityScalarWhereInput!]
  OR: [FavoriteActivityScalarWhereInput!]
  NOT: [FavoriteActivityScalarWhereInput!]
}

type FavoriteActivitySubscriptionPayload {
  mutation: MutationType!
  node: FavoriteActivity
  updatedFields: [String!]
  previousValues: FavoriteActivityPreviousValues
}

input FavoriteActivitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FavoriteActivityWhereInput
  AND: [FavoriteActivitySubscriptionWhereInput!]
  OR: [FavoriteActivitySubscriptionWhereInput!]
  NOT: [FavoriteActivitySubscriptionWhereInput!]
}

input FavoriteActivityUpdateDataInput {
  activityKey: String
}

input FavoriteActivityUpdateInput {
  activityKey: String
}

input FavoriteActivityUpdateManyDataInput {
  activityKey: String
}

input FavoriteActivityUpdateManyInput {
  create: [FavoriteActivityCreateInput!]
  update: [FavoriteActivityUpdateWithWhereUniqueNestedInput!]
  upsert: [FavoriteActivityUpsertWithWhereUniqueNestedInput!]
  delete: [FavoriteActivityWhereUniqueInput!]
  connect: [FavoriteActivityWhereUniqueInput!]
  set: [FavoriteActivityWhereUniqueInput!]
  disconnect: [FavoriteActivityWhereUniqueInput!]
  deleteMany: [FavoriteActivityScalarWhereInput!]
  updateMany: [FavoriteActivityUpdateManyWithWhereNestedInput!]
}

input FavoriteActivityUpdateManyMutationInput {
  activityKey: String
}

input FavoriteActivityUpdateManyWithWhereNestedInput {
  where: FavoriteActivityScalarWhereInput!
  data: FavoriteActivityUpdateManyDataInput!
}

input FavoriteActivityUpdateWithWhereUniqueNestedInput {
  where: FavoriteActivityWhereUniqueInput!
  data: FavoriteActivityUpdateDataInput!
}

input FavoriteActivityUpsertWithWhereUniqueNestedInput {
  where: FavoriteActivityWhereUniqueInput!
  update: FavoriteActivityUpdateDataInput!
  create: FavoriteActivityCreateInput!
}

input FavoriteActivityWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  activityKey: String
  activityKey_not: String
  activityKey_in: [String!]
  activityKey_not_in: [String!]
  activityKey_lt: String
  activityKey_lte: String
  activityKey_gt: String
  activityKey_gte: String
  activityKey_contains: String
  activityKey_not_contains: String
  activityKey_starts_with: String
  activityKey_not_starts_with: String
  activityKey_ends_with: String
  activityKey_not_ends_with: String
  AND: [FavoriteActivityWhereInput!]
  OR: [FavoriteActivityWhereInput!]
  NOT: [FavoriteActivityWhereInput!]
}

input FavoriteActivityWhereUniqueInput {
  id: ID
  activityKey: String
}

enum Gender {
  MALE
  FEMALE
  DIVERSE
}

type GlobalSettings {
  id: ID!
  updatedAt: DateTime
  matchingPercentageCap: Int
  matchingTimeout: TimeSpan
  defaultActivityTimeMinutesPerWeek: Int
  minimumActivityTimeMinutes: Int
  maximumActivityTimeMinutes: Int
  ipaqGroupLowMax: Int
  ipaqGroupModerateMax: Int
  ipaqGroupHighMax: Int
  phqGroupLowMin: Int
  phqGroupLowMax: Int
  botSettings: BotSettings
  webPushSettings: WebPushSettings
}

type GlobalSettingsConnection {
  pageInfo: PageInfo!
  edges: [GlobalSettingsEdge]!
  aggregate: AggregateGlobalSettings!
}

input GlobalSettingsCreateInput {
  id: ID
  matchingPercentageCap: Int
  matchingTimeout: TimeSpanCreateOneInput
  defaultActivityTimeMinutesPerWeek: Int
  minimumActivityTimeMinutes: Int
  maximumActivityTimeMinutes: Int
  ipaqGroupLowMax: Int
  ipaqGroupModerateMax: Int
  ipaqGroupHighMax: Int
  phqGroupLowMin: Int
  phqGroupLowMax: Int
  botSettings: BotSettingsCreateOneInput
  webPushSettings: WebPushSettingsCreateOneInput
}

type GlobalSettingsEdge {
  node: GlobalSettings!
  cursor: String!
}

enum GlobalSettingsOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  matchingPercentageCap_ASC
  matchingPercentageCap_DESC
  defaultActivityTimeMinutesPerWeek_ASC
  defaultActivityTimeMinutesPerWeek_DESC
  minimumActivityTimeMinutes_ASC
  minimumActivityTimeMinutes_DESC
  maximumActivityTimeMinutes_ASC
  maximumActivityTimeMinutes_DESC
  ipaqGroupLowMax_ASC
  ipaqGroupLowMax_DESC
  ipaqGroupModerateMax_ASC
  ipaqGroupModerateMax_DESC
  ipaqGroupHighMax_ASC
  ipaqGroupHighMax_DESC
  phqGroupLowMin_ASC
  phqGroupLowMin_DESC
  phqGroupLowMax_ASC
  phqGroupLowMax_DESC
}

type GlobalSettingsPreviousValues {
  id: ID!
  updatedAt: DateTime
  matchingPercentageCap: Int
  defaultActivityTimeMinutesPerWeek: Int
  minimumActivityTimeMinutes: Int
  maximumActivityTimeMinutes: Int
  ipaqGroupLowMax: Int
  ipaqGroupModerateMax: Int
  ipaqGroupHighMax: Int
  phqGroupLowMin: Int
  phqGroupLowMax: Int
}

type GlobalSettingsSubscriptionPayload {
  mutation: MutationType!
  node: GlobalSettings
  updatedFields: [String!]
  previousValues: GlobalSettingsPreviousValues
}

input GlobalSettingsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GlobalSettingsWhereInput
  AND: [GlobalSettingsSubscriptionWhereInput!]
  OR: [GlobalSettingsSubscriptionWhereInput!]
  NOT: [GlobalSettingsSubscriptionWhereInput!]
}

input GlobalSettingsUpdateInput {
  matchingPercentageCap: Int
  matchingTimeout: TimeSpanUpdateOneInput
  defaultActivityTimeMinutesPerWeek: Int
  minimumActivityTimeMinutes: Int
  maximumActivityTimeMinutes: Int
  ipaqGroupLowMax: Int
  ipaqGroupModerateMax: Int
  ipaqGroupHighMax: Int
  phqGroupLowMin: Int
  phqGroupLowMax: Int
  botSettings: BotSettingsUpdateOneInput
  webPushSettings: WebPushSettingsUpdateOneInput
}

input GlobalSettingsUpdateManyMutationInput {
  matchingPercentageCap: Int
  defaultActivityTimeMinutesPerWeek: Int
  minimumActivityTimeMinutes: Int
  maximumActivityTimeMinutes: Int
  ipaqGroupLowMax: Int
  ipaqGroupModerateMax: Int
  ipaqGroupHighMax: Int
  phqGroupLowMin: Int
  phqGroupLowMax: Int
}

input GlobalSettingsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  matchingPercentageCap: Int
  matchingPercentageCap_not: Int
  matchingPercentageCap_in: [Int!]
  matchingPercentageCap_not_in: [Int!]
  matchingPercentageCap_lt: Int
  matchingPercentageCap_lte: Int
  matchingPercentageCap_gt: Int
  matchingPercentageCap_gte: Int
  matchingTimeout: TimeSpanWhereInput
  defaultActivityTimeMinutesPerWeek: Int
  defaultActivityTimeMinutesPerWeek_not: Int
  defaultActivityTimeMinutesPerWeek_in: [Int!]
  defaultActivityTimeMinutesPerWeek_not_in: [Int!]
  defaultActivityTimeMinutesPerWeek_lt: Int
  defaultActivityTimeMinutesPerWeek_lte: Int
  defaultActivityTimeMinutesPerWeek_gt: Int
  defaultActivityTimeMinutesPerWeek_gte: Int
  minimumActivityTimeMinutes: Int
  minimumActivityTimeMinutes_not: Int
  minimumActivityTimeMinutes_in: [Int!]
  minimumActivityTimeMinutes_not_in: [Int!]
  minimumActivityTimeMinutes_lt: Int
  minimumActivityTimeMinutes_lte: Int
  minimumActivityTimeMinutes_gt: Int
  minimumActivityTimeMinutes_gte: Int
  maximumActivityTimeMinutes: Int
  maximumActivityTimeMinutes_not: Int
  maximumActivityTimeMinutes_in: [Int!]
  maximumActivityTimeMinutes_not_in: [Int!]
  maximumActivityTimeMinutes_lt: Int
  maximumActivityTimeMinutes_lte: Int
  maximumActivityTimeMinutes_gt: Int
  maximumActivityTimeMinutes_gte: Int
  ipaqGroupLowMax: Int
  ipaqGroupLowMax_not: Int
  ipaqGroupLowMax_in: [Int!]
  ipaqGroupLowMax_not_in: [Int!]
  ipaqGroupLowMax_lt: Int
  ipaqGroupLowMax_lte: Int
  ipaqGroupLowMax_gt: Int
  ipaqGroupLowMax_gte: Int
  ipaqGroupModerateMax: Int
  ipaqGroupModerateMax_not: Int
  ipaqGroupModerateMax_in: [Int!]
  ipaqGroupModerateMax_not_in: [Int!]
  ipaqGroupModerateMax_lt: Int
  ipaqGroupModerateMax_lte: Int
  ipaqGroupModerateMax_gt: Int
  ipaqGroupModerateMax_gte: Int
  ipaqGroupHighMax: Int
  ipaqGroupHighMax_not: Int
  ipaqGroupHighMax_in: [Int!]
  ipaqGroupHighMax_not_in: [Int!]
  ipaqGroupHighMax_lt: Int
  ipaqGroupHighMax_lte: Int
  ipaqGroupHighMax_gt: Int
  ipaqGroupHighMax_gte: Int
  phqGroupLowMin: Int
  phqGroupLowMin_not: Int
  phqGroupLowMin_in: [Int!]
  phqGroupLowMin_not_in: [Int!]
  phqGroupLowMin_lt: Int
  phqGroupLowMin_lte: Int
  phqGroupLowMin_gt: Int
  phqGroupLowMin_gte: Int
  phqGroupLowMax: Int
  phqGroupLowMax_not: Int
  phqGroupLowMax_in: [Int!]
  phqGroupLowMax_not_in: [Int!]
  phqGroupLowMax_lt: Int
  phqGroupLowMax_lte: Int
  phqGroupLowMax_gt: Int
  phqGroupLowMax_gte: Int
  botSettings: BotSettingsWhereInput
  webPushSettings: WebPushSettingsWhereInput
  AND: [GlobalSettingsWhereInput!]
  OR: [GlobalSettingsWhereInput!]
  NOT: [GlobalSettingsWhereInput!]
}

input GlobalSettingsWhereUniqueInput {
  id: ID
}

type Group {
  id: ID!
  title: String!
  description: String!
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  challenge(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge!]
}

type GroupColor {
  id: ID!
  group: Group
  color: String!
}

type GroupColorConnection {
  pageInfo: PageInfo!
  edges: [GroupColorEdge]!
  aggregate: AggregateGroupColor!
}

input GroupColorCreateInput {
  id: ID
  group: GroupCreateOneInput
  color: String!
}

type GroupColorEdge {
  node: GroupColor!
  cursor: String!
}

enum GroupColorOrderByInput {
  id_ASC
  id_DESC
  color_ASC
  color_DESC
}

type GroupColorPreviousValues {
  id: ID!
  color: String!
}

type GroupColorSubscriptionPayload {
  mutation: MutationType!
  node: GroupColor
  updatedFields: [String!]
  previousValues: GroupColorPreviousValues
}

input GroupColorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroupColorWhereInput
  AND: [GroupColorSubscriptionWhereInput!]
  OR: [GroupColorSubscriptionWhereInput!]
  NOT: [GroupColorSubscriptionWhereInput!]
}

input GroupColorUpdateInput {
  group: GroupUpdateOneInput
  color: String
}

input GroupColorUpdateManyMutationInput {
  color: String
}

input GroupColorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  group: GroupWhereInput
  color: String
  color_not: String
  color_in: [String!]
  color_not_in: [String!]
  color_lt: String
  color_lte: String
  color_gt: String
  color_gte: String
  color_contains: String
  color_not_contains: String
  color_starts_with: String
  color_not_starts_with: String
  color_ends_with: String
  color_not_ends_with: String
  AND: [GroupColorWhereInput!]
  OR: [GroupColorWhereInput!]
  NOT: [GroupColorWhereInput!]
}

input GroupColorWhereUniqueInput {
  id: ID
}

type GroupConnection {
  pageInfo: PageInfo!
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  id: ID
  title: String!
  description: String!
  createdBy: UserCreateOneInput
  challenge: ChallengeCreateManyWithoutGroupInput
}

input GroupCreateManyWithoutChallengeInput {
  create: [GroupCreateWithoutChallengeInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateOneInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutChallengeInput {
  id: ID
  title: String!
  description: String!
  createdBy: UserCreateOneInput
}

type GroupEdge {
  node: Group!
  cursor: String!
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GroupPreviousValues {
  id: ID!
  title: String!
  description: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input GroupScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [GroupScalarWhereInput!]
  OR: [GroupScalarWhereInput!]
  NOT: [GroupScalarWhereInput!]
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
  AND: [GroupSubscriptionWhereInput!]
  OR: [GroupSubscriptionWhereInput!]
  NOT: [GroupSubscriptionWhereInput!]
}

input GroupUpdateDataInput {
  title: String
  description: String
  createdBy: UserUpdateOneInput
  challenge: ChallengeUpdateManyWithoutGroupInput
}

input GroupUpdateInput {
  title: String
  description: String
  createdBy: UserUpdateOneInput
  challenge: ChallengeUpdateManyWithoutGroupInput
}

input GroupUpdateManyDataInput {
  title: String
  description: String
}

input GroupUpdateManyMutationInput {
  title: String
  description: String
}

input GroupUpdateManyWithoutChallengeInput {
  create: [GroupCreateWithoutChallengeInput!]
  delete: [GroupWhereUniqueInput!]
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutChallengeInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutChallengeInput!]
  deleteMany: [GroupScalarWhereInput!]
  updateMany: [GroupUpdateManyWithWhereNestedInput!]
}

input GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput!
  data: GroupUpdateManyDataInput!
}

input GroupUpdateOneInput {
  create: GroupCreateInput
  update: GroupUpdateDataInput
  upsert: GroupUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: GroupWhereUniqueInput
}

input GroupUpdateWithoutChallengeDataInput {
  title: String
  description: String
  createdBy: UserUpdateOneInput
}

input GroupUpdateWithWhereUniqueWithoutChallengeInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutChallengeDataInput!
}

input GroupUpsertNestedInput {
  update: GroupUpdateDataInput!
  create: GroupCreateInput!
}

input GroupUpsertWithWhereUniqueWithoutChallengeInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutChallengeDataInput!
  create: GroupCreateWithoutChallengeInput!
}

input GroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdBy: UserWhereInput
  challenge_every: ChallengeWhereInput
  challenge_some: ChallengeWhereInput
  challenge_none: ChallengeWhereInput
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
}

input GroupWhereUniqueInput {
  id: ID
  title: String
}

type Initiator {
  id: ID!
  title: String!
  description: String!
}

type InitiatorConnection {
  pageInfo: PageInfo!
  edges: [InitiatorEdge]!
  aggregate: AggregateInitiator!
}

input InitiatorCreateInput {
  id: ID
  title: String!
  description: String!
}

type InitiatorEdge {
  node: Initiator!
  cursor: String!
}

enum InitiatorOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
}

type InitiatorPreviousValues {
  id: ID!
  title: String!
  description: String!
}

type InitiatorSubscriptionPayload {
  mutation: MutationType!
  node: Initiator
  updatedFields: [String!]
  previousValues: InitiatorPreviousValues
}

input InitiatorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InitiatorWhereInput
  AND: [InitiatorSubscriptionWhereInput!]
  OR: [InitiatorSubscriptionWhereInput!]
  NOT: [InitiatorSubscriptionWhereInput!]
}

input InitiatorUpdateInput {
  title: String
  description: String
}

input InitiatorUpdateManyMutationInput {
  title: String
  description: String
}

input InitiatorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [InitiatorWhereInput!]
  OR: [InitiatorWhereInput!]
  NOT: [InitiatorWhereInput!]
}

input InitiatorWhereUniqueInput {
  id: ID
  title: String
}

type Ipaq {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  answers(where: IpaqAnswersWhereInput, orderBy: IpaqAnswersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [IpaqAnswers!]
  score: Float
  expiryDate: DateTime
  isComplete: Boolean
  quests: Questionnaires!
}

type IpaqAnswers {
  id: ID!
  numDays: Int
  numHours: Int
  numMinutes: Int
  quest: Ipaq!
}

type IpaqAnswersConnection {
  pageInfo: PageInfo!
  edges: [IpaqAnswersEdge]!
  aggregate: AggregateIpaqAnswers!
}

input IpaqAnswersCreateInput {
  id: ID
  numDays: Int
  numHours: Int
  numMinutes: Int
  quest: IpaqCreateOneWithoutAnswersInput!
}

input IpaqAnswersCreateManyWithoutQuestInput {
  create: [IpaqAnswersCreateWithoutQuestInput!]
  connect: [IpaqAnswersWhereUniqueInput!]
}

input IpaqAnswersCreateWithoutQuestInput {
  id: ID
  numDays: Int
  numHours: Int
  numMinutes: Int
}

type IpaqAnswersEdge {
  node: IpaqAnswers!
  cursor: String!
}

enum IpaqAnswersOrderByInput {
  id_ASC
  id_DESC
  numDays_ASC
  numDays_DESC
  numHours_ASC
  numHours_DESC
  numMinutes_ASC
  numMinutes_DESC
}

type IpaqAnswersPreviousValues {
  id: ID!
  numDays: Int
  numHours: Int
  numMinutes: Int
}

input IpaqAnswersScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  numDays: Int
  numDays_not: Int
  numDays_in: [Int!]
  numDays_not_in: [Int!]
  numDays_lt: Int
  numDays_lte: Int
  numDays_gt: Int
  numDays_gte: Int
  numHours: Int
  numHours_not: Int
  numHours_in: [Int!]
  numHours_not_in: [Int!]
  numHours_lt: Int
  numHours_lte: Int
  numHours_gt: Int
  numHours_gte: Int
  numMinutes: Int
  numMinutes_not: Int
  numMinutes_in: [Int!]
  numMinutes_not_in: [Int!]
  numMinutes_lt: Int
  numMinutes_lte: Int
  numMinutes_gt: Int
  numMinutes_gte: Int
  AND: [IpaqAnswersScalarWhereInput!]
  OR: [IpaqAnswersScalarWhereInput!]
  NOT: [IpaqAnswersScalarWhereInput!]
}

type IpaqAnswersSubscriptionPayload {
  mutation: MutationType!
  node: IpaqAnswers
  updatedFields: [String!]
  previousValues: IpaqAnswersPreviousValues
}

input IpaqAnswersSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IpaqAnswersWhereInput
  AND: [IpaqAnswersSubscriptionWhereInput!]
  OR: [IpaqAnswersSubscriptionWhereInput!]
  NOT: [IpaqAnswersSubscriptionWhereInput!]
}

input IpaqAnswersUpdateInput {
  numDays: Int
  numHours: Int
  numMinutes: Int
  quest: IpaqUpdateOneRequiredWithoutAnswersInput
}

input IpaqAnswersUpdateManyDataInput {
  numDays: Int
  numHours: Int
  numMinutes: Int
}

input IpaqAnswersUpdateManyMutationInput {
  numDays: Int
  numHours: Int
  numMinutes: Int
}

input IpaqAnswersUpdateManyWithoutQuestInput {
  create: [IpaqAnswersCreateWithoutQuestInput!]
  delete: [IpaqAnswersWhereUniqueInput!]
  connect: [IpaqAnswersWhereUniqueInput!]
  set: [IpaqAnswersWhereUniqueInput!]
  disconnect: [IpaqAnswersWhereUniqueInput!]
  update: [IpaqAnswersUpdateWithWhereUniqueWithoutQuestInput!]
  upsert: [IpaqAnswersUpsertWithWhereUniqueWithoutQuestInput!]
  deleteMany: [IpaqAnswersScalarWhereInput!]
  updateMany: [IpaqAnswersUpdateManyWithWhereNestedInput!]
}

input IpaqAnswersUpdateManyWithWhereNestedInput {
  where: IpaqAnswersScalarWhereInput!
  data: IpaqAnswersUpdateManyDataInput!
}

input IpaqAnswersUpdateWithoutQuestDataInput {
  numDays: Int
  numHours: Int
  numMinutes: Int
}

input IpaqAnswersUpdateWithWhereUniqueWithoutQuestInput {
  where: IpaqAnswersWhereUniqueInput!
  data: IpaqAnswersUpdateWithoutQuestDataInput!
}

input IpaqAnswersUpsertWithWhereUniqueWithoutQuestInput {
  where: IpaqAnswersWhereUniqueInput!
  update: IpaqAnswersUpdateWithoutQuestDataInput!
  create: IpaqAnswersCreateWithoutQuestInput!
}

input IpaqAnswersWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  numDays: Int
  numDays_not: Int
  numDays_in: [Int!]
  numDays_not_in: [Int!]
  numDays_lt: Int
  numDays_lte: Int
  numDays_gt: Int
  numDays_gte: Int
  numHours: Int
  numHours_not: Int
  numHours_in: [Int!]
  numHours_not_in: [Int!]
  numHours_lt: Int
  numHours_lte: Int
  numHours_gt: Int
  numHours_gte: Int
  numMinutes: Int
  numMinutes_not: Int
  numMinutes_in: [Int!]
  numMinutes_not_in: [Int!]
  numMinutes_lt: Int
  numMinutes_lte: Int
  numMinutes_gt: Int
  numMinutes_gte: Int
  quest: IpaqWhereInput
  AND: [IpaqAnswersWhereInput!]
  OR: [IpaqAnswersWhereInput!]
  NOT: [IpaqAnswersWhereInput!]
}

input IpaqAnswersWhereUniqueInput {
  id: ID
}

type IpaqConnection {
  pageInfo: PageInfo!
  edges: [IpaqEdge]!
  aggregate: AggregateIpaq!
}

input IpaqCreateInput {
  id: ID
  answers: IpaqAnswersCreateManyWithoutQuestInput
  score: Float
  expiryDate: DateTime
  isComplete: Boolean
  quests: QuestionnairesCreateOneWithoutIpaqsInput!
}

input IpaqCreateManyWithoutQuestsInput {
  create: [IpaqCreateWithoutQuestsInput!]
  connect: [IpaqWhereUniqueInput!]
}

input IpaqCreateOneWithoutAnswersInput {
  create: IpaqCreateWithoutAnswersInput
  connect: IpaqWhereUniqueInput
}

input IpaqCreateWithoutAnswersInput {
  id: ID
  score: Float
  expiryDate: DateTime
  isComplete: Boolean
  quests: QuestionnairesCreateOneWithoutIpaqsInput!
}

input IpaqCreateWithoutQuestsInput {
  id: ID
  answers: IpaqAnswersCreateManyWithoutQuestInput
  score: Float
  expiryDate: DateTime
  isComplete: Boolean
}

type IpaqEdge {
  node: Ipaq!
  cursor: String!
}

enum IpaqOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  score_ASC
  score_DESC
  expiryDate_ASC
  expiryDate_DESC
  isComplete_ASC
  isComplete_DESC
}

type IpaqPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  score: Float
  expiryDate: DateTime
  isComplete: Boolean
}

input IpaqScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  score: Float
  score_not: Float
  score_in: [Float!]
  score_not_in: [Float!]
  score_lt: Float
  score_lte: Float
  score_gt: Float
  score_gte: Float
  expiryDate: DateTime
  expiryDate_not: DateTime
  expiryDate_in: [DateTime!]
  expiryDate_not_in: [DateTime!]
  expiryDate_lt: DateTime
  expiryDate_lte: DateTime
  expiryDate_gt: DateTime
  expiryDate_gte: DateTime
  isComplete: Boolean
  isComplete_not: Boolean
  AND: [IpaqScalarWhereInput!]
  OR: [IpaqScalarWhereInput!]
  NOT: [IpaqScalarWhereInput!]
}

type IpaqSubscriptionPayload {
  mutation: MutationType!
  node: Ipaq
  updatedFields: [String!]
  previousValues: IpaqPreviousValues
}

input IpaqSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IpaqWhereInput
  AND: [IpaqSubscriptionWhereInput!]
  OR: [IpaqSubscriptionWhereInput!]
  NOT: [IpaqSubscriptionWhereInput!]
}

input IpaqUpdateInput {
  answers: IpaqAnswersUpdateManyWithoutQuestInput
  score: Float
  expiryDate: DateTime
  isComplete: Boolean
  quests: QuestionnairesUpdateOneRequiredWithoutIpaqsInput
}

input IpaqUpdateManyDataInput {
  score: Float
  expiryDate: DateTime
  isComplete: Boolean
}

input IpaqUpdateManyMutationInput {
  score: Float
  expiryDate: DateTime
  isComplete: Boolean
}

input IpaqUpdateManyWithoutQuestsInput {
  create: [IpaqCreateWithoutQuestsInput!]
  delete: [IpaqWhereUniqueInput!]
  connect: [IpaqWhereUniqueInput!]
  set: [IpaqWhereUniqueInput!]
  disconnect: [IpaqWhereUniqueInput!]
  update: [IpaqUpdateWithWhereUniqueWithoutQuestsInput!]
  upsert: [IpaqUpsertWithWhereUniqueWithoutQuestsInput!]
  deleteMany: [IpaqScalarWhereInput!]
  updateMany: [IpaqUpdateManyWithWhereNestedInput!]
}

input IpaqUpdateManyWithWhereNestedInput {
  where: IpaqScalarWhereInput!
  data: IpaqUpdateManyDataInput!
}

input IpaqUpdateOneRequiredWithoutAnswersInput {
  create: IpaqCreateWithoutAnswersInput
  update: IpaqUpdateWithoutAnswersDataInput
  upsert: IpaqUpsertWithoutAnswersInput
  connect: IpaqWhereUniqueInput
}

input IpaqUpdateWithoutAnswersDataInput {
  score: Float
  expiryDate: DateTime
  isComplete: Boolean
  quests: QuestionnairesUpdateOneRequiredWithoutIpaqsInput
}

input IpaqUpdateWithoutQuestsDataInput {
  answers: IpaqAnswersUpdateManyWithoutQuestInput
  score: Float
  expiryDate: DateTime
  isComplete: Boolean
}

input IpaqUpdateWithWhereUniqueWithoutQuestsInput {
  where: IpaqWhereUniqueInput!
  data: IpaqUpdateWithoutQuestsDataInput!
}

input IpaqUpsertWithoutAnswersInput {
  update: IpaqUpdateWithoutAnswersDataInput!
  create: IpaqCreateWithoutAnswersInput!
}

input IpaqUpsertWithWhereUniqueWithoutQuestsInput {
  where: IpaqWhereUniqueInput!
  update: IpaqUpdateWithoutQuestsDataInput!
  create: IpaqCreateWithoutQuestsInput!
}

input IpaqWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  answers_every: IpaqAnswersWhereInput
  answers_some: IpaqAnswersWhereInput
  answers_none: IpaqAnswersWhereInput
  score: Float
  score_not: Float
  score_in: [Float!]
  score_not_in: [Float!]
  score_lt: Float
  score_lte: Float
  score_gt: Float
  score_gte: Float
  expiryDate: DateTime
  expiryDate_not: DateTime
  expiryDate_in: [DateTime!]
  expiryDate_not_in: [DateTime!]
  expiryDate_lt: DateTime
  expiryDate_lte: DateTime
  expiryDate_gt: DateTime
  expiryDate_gte: DateTime
  isComplete: Boolean
  isComplete_not: Boolean
  quests: QuestionnairesWhereInput
  AND: [IpaqWhereInput!]
  OR: [IpaqWhereInput!]
  NOT: [IpaqWhereInput!]
}

input IpaqWhereUniqueInput {
  id: ID
}

type JoinedChallenges {
  id: ID!
  userId: User
  challegeId: Challenge
}

type JoinedChallengesConnection {
  pageInfo: PageInfo!
  edges: [JoinedChallengesEdge]!
  aggregate: AggregateJoinedChallenges!
}

input JoinedChallengesCreateInput {
  id: ID
  userId: UserCreateOneInput
  challegeId: ChallengeCreateOneInput
}

type JoinedChallengesEdge {
  node: JoinedChallenges!
  cursor: String!
}

enum JoinedChallengesOrderByInput {
  id_ASC
  id_DESC
}

type JoinedChallengesPreviousValues {
  id: ID!
}

type JoinedChallengesSubscriptionPayload {
  mutation: MutationType!
  node: JoinedChallenges
  updatedFields: [String!]
  previousValues: JoinedChallengesPreviousValues
}

input JoinedChallengesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: JoinedChallengesWhereInput
  AND: [JoinedChallengesSubscriptionWhereInput!]
  OR: [JoinedChallengesSubscriptionWhereInput!]
  NOT: [JoinedChallengesSubscriptionWhereInput!]
}

input JoinedChallengesUpdateInput {
  userId: UserUpdateOneInput
  challegeId: ChallengeUpdateOneInput
}

input JoinedChallengesWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userId: UserWhereInput
  challegeId: ChallengeWhereInput
  AND: [JoinedChallengesWhereInput!]
  OR: [JoinedChallengesWhereInput!]
  NOT: [JoinedChallengesWhereInput!]
}

input JoinedChallengesWhereUniqueInput {
  id: ID
}

scalar Json

scalar Long

type Mutation {
  createActivity(data: ActivityCreateInput!): Activity!
  updateActivity(data: ActivityUpdateInput!, where: ActivityWhereUniqueInput!): Activity
  updateManyActivities(data: ActivityUpdateManyMutationInput!, where: ActivityWhereInput): BatchPayload!
  upsertActivity(where: ActivityWhereUniqueInput!, create: ActivityCreateInput!, update: ActivityUpdateInput!): Activity!
  deleteActivity(where: ActivityWhereUniqueInput!): Activity
  deleteManyActivities(where: ActivityWhereInput): BatchPayload!
  createAward(data: AwardCreateInput!): Award!
  updateAward(data: AwardUpdateInput!, where: AwardWhereUniqueInput!): Award
  updateManyAwards(data: AwardUpdateManyMutationInput!, where: AwardWhereInput): BatchPayload!
  upsertAward(where: AwardWhereUniqueInput!, create: AwardCreateInput!, update: AwardUpdateInput!): Award!
  deleteAward(where: AwardWhereUniqueInput!): Award
  deleteManyAwards(where: AwardWhereInput): BatchPayload!
  createBot(data: BotCreateInput!): Bot!
  updateBot(data: BotUpdateInput!, where: BotWhereUniqueInput!): Bot
  updateManyBots(data: BotUpdateManyMutationInput!, where: BotWhereInput): BatchPayload!
  upsertBot(where: BotWhereUniqueInput!, create: BotCreateInput!, update: BotUpdateInput!): Bot!
  deleteBot(where: BotWhereUniqueInput!): Bot
  deleteManyBots(where: BotWhereInput): BatchPayload!
  createBotSettings(data: BotSettingsCreateInput!): BotSettings!
  updateBotSettings(data: BotSettingsUpdateInput!, where: BotSettingsWhereUniqueInput!): BotSettings
  updateManyBotSettingses(data: BotSettingsUpdateManyMutationInput!, where: BotSettingsWhereInput): BatchPayload!
  upsertBotSettings(where: BotSettingsWhereUniqueInput!, create: BotSettingsCreateInput!, update: BotSettingsUpdateInput!): BotSettings!
  deleteBotSettings(where: BotSettingsWhereUniqueInput!): BotSettings
  deleteManyBotSettingses(where: BotSettingsWhereInput): BatchPayload!
  createBuddy(data: BuddyCreateInput!): Buddy!
  updateBuddy(data: BuddyUpdateInput!, where: BuddyWhereUniqueInput!): Buddy
  upsertBuddy(where: BuddyWhereUniqueInput!, create: BuddyCreateInput!, update: BuddyUpdateInput!): Buddy!
  deleteBuddy(where: BuddyWhereUniqueInput!): Buddy
  deleteManyBuddies(where: BuddyWhereInput): BatchPayload!
  createBuddyRequest(data: BuddyRequestCreateInput!): BuddyRequest!
  updateBuddyRequest(data: BuddyRequestUpdateInput!, where: BuddyRequestWhereUniqueInput!): BuddyRequest
  updateManyBuddyRequests(data: BuddyRequestUpdateManyMutationInput!, where: BuddyRequestWhereInput): BatchPayload!
  upsertBuddyRequest(where: BuddyRequestWhereUniqueInput!, create: BuddyRequestCreateInput!, update: BuddyRequestUpdateInput!): BuddyRequest!
  deleteBuddyRequest(where: BuddyRequestWhereUniqueInput!): BuddyRequest
  deleteManyBuddyRequests(where: BuddyRequestWhereInput): BatchPayload!
  createCalendarEntry(data: CalendarEntryCreateInput!): CalendarEntry!
  updateCalendarEntry(data: CalendarEntryUpdateInput!, where: CalendarEntryWhereUniqueInput!): CalendarEntry
  updateManyCalendarEntries(data: CalendarEntryUpdateManyMutationInput!, where: CalendarEntryWhereInput): BatchPayload!
  upsertCalendarEntry(where: CalendarEntryWhereUniqueInput!, create: CalendarEntryCreateInput!, update: CalendarEntryUpdateInput!): CalendarEntry!
  deleteCalendarEntry(where: CalendarEntryWhereUniqueInput!): CalendarEntry
  deleteManyCalendarEntries(where: CalendarEntryWhereInput): BatchPayload!
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createChallenge(data: ChallengeCreateInput!): Challenge!
  updateChallenge(data: ChallengeUpdateInput!, where: ChallengeWhereUniqueInput!): Challenge
  updateManyChallenges(data: ChallengeUpdateManyMutationInput!, where: ChallengeWhereInput): BatchPayload!
  upsertChallenge(where: ChallengeWhereUniqueInput!, create: ChallengeCreateInput!, update: ChallengeUpdateInput!): Challenge!
  deleteChallenge(where: ChallengeWhereUniqueInput!): Challenge
  deleteManyChallenges(where: ChallengeWhereInput): BatchPayload!
  createChallengeCategory(data: ChallengeCategoryCreateInput!): ChallengeCategory!
  updateChallengeCategory(data: ChallengeCategoryUpdateInput!, where: ChallengeCategoryWhereUniqueInput!): ChallengeCategory
  upsertChallengeCategory(where: ChallengeCategoryWhereUniqueInput!, create: ChallengeCategoryCreateInput!, update: ChallengeCategoryUpdateInput!): ChallengeCategory!
  deleteChallengeCategory(where: ChallengeCategoryWhereUniqueInput!): ChallengeCategory
  deleteManyChallengeCategories(where: ChallengeCategoryWhereInput): BatchPayload!
  createChallengeGroup(data: ChallengeGroupCreateInput!): ChallengeGroup!
  updateChallengeGroup(data: ChallengeGroupUpdateInput!, where: ChallengeGroupWhereUniqueInput!): ChallengeGroup
  upsertChallengeGroup(where: ChallengeGroupWhereUniqueInput!, create: ChallengeGroupCreateInput!, update: ChallengeGroupUpdateInput!): ChallengeGroup!
  deleteChallengeGroup(where: ChallengeGroupWhereUniqueInput!): ChallengeGroup
  deleteManyChallengeGroups(where: ChallengeGroupWhereInput): BatchPayload!
  createChat(data: ChatCreateInput!): Chat!
  updateChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat
  upsertChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat!
  deleteChat(where: ChatWhereUniqueInput!): Chat
  deleteManyChats(where: ChatWhereInput): BatchPayload!
  createChatMessage(data: ChatMessageCreateInput!): ChatMessage!
  updateChatMessage(data: ChatMessageUpdateInput!, where: ChatMessageWhereUniqueInput!): ChatMessage
  updateManyChatMessages(data: ChatMessageUpdateManyMutationInput!, where: ChatMessageWhereInput): BatchPayload!
  upsertChatMessage(where: ChatMessageWhereUniqueInput!, create: ChatMessageCreateInput!, update: ChatMessageUpdateInput!): ChatMessage!
  deleteChatMessage(where: ChatMessageWhereUniqueInput!): ChatMessage
  deleteManyChatMessages(where: ChatMessageWhereInput): BatchPayload!
  createChatMessageAttachment(data: ChatMessageAttachmentCreateInput!): ChatMessageAttachment!
  updateChatMessageAttachment(data: ChatMessageAttachmentUpdateInput!, where: ChatMessageAttachmentWhereUniqueInput!): ChatMessageAttachment
  updateManyChatMessageAttachments(data: ChatMessageAttachmentUpdateManyMutationInput!, where: ChatMessageAttachmentWhereInput): BatchPayload!
  upsertChatMessageAttachment(where: ChatMessageAttachmentWhereUniqueInput!, create: ChatMessageAttachmentCreateInput!, update: ChatMessageAttachmentUpdateInput!): ChatMessageAttachment!
  deleteChatMessageAttachment(where: ChatMessageAttachmentWhereUniqueInput!): ChatMessageAttachment
  deleteManyChatMessageAttachments(where: ChatMessageAttachmentWhereInput): BatchPayload!
  createContribution(data: ContributionCreateInput!): Contribution!
  updateContribution(data: ContributionUpdateInput!, where: ContributionWhereUniqueInput!): Contribution
  updateManyContributions(data: ContributionUpdateManyMutationInput!, where: ContributionWhereInput): BatchPayload!
  upsertContribution(where: ContributionWhereUniqueInput!, create: ContributionCreateInput!, update: ContributionUpdateInput!): Contribution!
  deleteContribution(where: ContributionWhereUniqueInput!): Contribution
  deleteManyContributions(where: ContributionWhereInput): BatchPayload!
  createFavoriteActivity(data: FavoriteActivityCreateInput!): FavoriteActivity!
  updateFavoriteActivity(data: FavoriteActivityUpdateInput!, where: FavoriteActivityWhereUniqueInput!): FavoriteActivity
  updateManyFavoriteActivities(data: FavoriteActivityUpdateManyMutationInput!, where: FavoriteActivityWhereInput): BatchPayload!
  upsertFavoriteActivity(where: FavoriteActivityWhereUniqueInput!, create: FavoriteActivityCreateInput!, update: FavoriteActivityUpdateInput!): FavoriteActivity!
  deleteFavoriteActivity(where: FavoriteActivityWhereUniqueInput!): FavoriteActivity
  deleteManyFavoriteActivities(where: FavoriteActivityWhereInput): BatchPayload!
  createGlobalSettings(data: GlobalSettingsCreateInput!): GlobalSettings!
  updateGlobalSettings(data: GlobalSettingsUpdateInput!, where: GlobalSettingsWhereUniqueInput!): GlobalSettings
  updateManyGlobalSettingses(data: GlobalSettingsUpdateManyMutationInput!, where: GlobalSettingsWhereInput): BatchPayload!
  upsertGlobalSettings(where: GlobalSettingsWhereUniqueInput!, create: GlobalSettingsCreateInput!, update: GlobalSettingsUpdateInput!): GlobalSettings!
  deleteGlobalSettings(where: GlobalSettingsWhereUniqueInput!): GlobalSettings
  deleteManyGlobalSettingses(where: GlobalSettingsWhereInput): BatchPayload!
  createGroup(data: GroupCreateInput!): Group!
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updateManyGroups(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  createGroupColor(data: GroupColorCreateInput!): GroupColor!
  updateGroupColor(data: GroupColorUpdateInput!, where: GroupColorWhereUniqueInput!): GroupColor
  updateManyGroupColors(data: GroupColorUpdateManyMutationInput!, where: GroupColorWhereInput): BatchPayload!
  upsertGroupColor(where: GroupColorWhereUniqueInput!, create: GroupColorCreateInput!, update: GroupColorUpdateInput!): GroupColor!
  deleteGroupColor(where: GroupColorWhereUniqueInput!): GroupColor
  deleteManyGroupColors(where: GroupColorWhereInput): BatchPayload!
  createInitiator(data: InitiatorCreateInput!): Initiator!
  updateInitiator(data: InitiatorUpdateInput!, where: InitiatorWhereUniqueInput!): Initiator
  updateManyInitiators(data: InitiatorUpdateManyMutationInput!, where: InitiatorWhereInput): BatchPayload!
  upsertInitiator(where: InitiatorWhereUniqueInput!, create: InitiatorCreateInput!, update: InitiatorUpdateInput!): Initiator!
  deleteInitiator(where: InitiatorWhereUniqueInput!): Initiator
  deleteManyInitiators(where: InitiatorWhereInput): BatchPayload!
  createIpaq(data: IpaqCreateInput!): Ipaq!
  updateIpaq(data: IpaqUpdateInput!, where: IpaqWhereUniqueInput!): Ipaq
  updateManyIpaqs(data: IpaqUpdateManyMutationInput!, where: IpaqWhereInput): BatchPayload!
  upsertIpaq(where: IpaqWhereUniqueInput!, create: IpaqCreateInput!, update: IpaqUpdateInput!): Ipaq!
  deleteIpaq(where: IpaqWhereUniqueInput!): Ipaq
  deleteManyIpaqs(where: IpaqWhereInput): BatchPayload!
  createIpaqAnswers(data: IpaqAnswersCreateInput!): IpaqAnswers!
  updateIpaqAnswers(data: IpaqAnswersUpdateInput!, where: IpaqAnswersWhereUniqueInput!): IpaqAnswers
  updateManyIpaqAnswerses(data: IpaqAnswersUpdateManyMutationInput!, where: IpaqAnswersWhereInput): BatchPayload!
  upsertIpaqAnswers(where: IpaqAnswersWhereUniqueInput!, create: IpaqAnswersCreateInput!, update: IpaqAnswersUpdateInput!): IpaqAnswers!
  deleteIpaqAnswers(where: IpaqAnswersWhereUniqueInput!): IpaqAnswers
  deleteManyIpaqAnswerses(where: IpaqAnswersWhereInput): BatchPayload!
  createJoinedChallenges(data: JoinedChallengesCreateInput!): JoinedChallenges!
  updateJoinedChallenges(data: JoinedChallengesUpdateInput!, where: JoinedChallengesWhereUniqueInput!): JoinedChallenges
  upsertJoinedChallenges(where: JoinedChallengesWhereUniqueInput!, create: JoinedChallengesCreateInput!, update: JoinedChallengesUpdateInput!): JoinedChallenges!
  deleteJoinedChallenges(where: JoinedChallengesWhereUniqueInput!): JoinedChallenges
  deleteManyJoinedChallengeses(where: JoinedChallengesWhereInput): BatchPayload!
  createPatient(data: PatientCreateInput!): Patient!
  updatePatient(data: PatientUpdateInput!, where: PatientWhereUniqueInput!): Patient
  updateManyPatients(data: PatientUpdateManyMutationInput!, where: PatientWhereInput): BatchPayload!
  upsertPatient(where: PatientWhereUniqueInput!, create: PatientCreateInput!, update: PatientUpdateInput!): Patient!
  deletePatient(where: PatientWhereUniqueInput!): Patient
  deleteManyPatients(where: PatientWhereInput): BatchPayload!
  createPatientProfileInfo(data: PatientProfileInfoCreateInput!): PatientProfileInfo!
  updatePatientProfileInfo(data: PatientProfileInfoUpdateInput!, where: PatientProfileInfoWhereUniqueInput!): PatientProfileInfo
  updateManyPatientProfileInfoes(data: PatientProfileInfoUpdateManyMutationInput!, where: PatientProfileInfoWhereInput): BatchPayload!
  upsertPatientProfileInfo(where: PatientProfileInfoWhereUniqueInput!, create: PatientProfileInfoCreateInput!, update: PatientProfileInfoUpdateInput!): PatientProfileInfo!
  deletePatientProfileInfo(where: PatientProfileInfoWhereUniqueInput!): PatientProfileInfo
  deleteManyPatientProfileInfoes(where: PatientProfileInfoWhereInput): BatchPayload!
  createPhq9(data: Phq9CreateInput!): Phq9!
  updatePhq9(data: Phq9UpdateInput!, where: Phq9WhereUniqueInput!): Phq9
  updateManyPhq9s(data: Phq9UpdateManyMutationInput!, where: Phq9WhereInput): BatchPayload!
  upsertPhq9(where: Phq9WhereUniqueInput!, create: Phq9CreateInput!, update: Phq9UpdateInput!): Phq9!
  deletePhq9(where: Phq9WhereUniqueInput!): Phq9
  deleteManyPhq9s(where: Phq9WhereInput): BatchPayload!
  createProfileActivity(data: ProfileActivityCreateInput!): ProfileActivity!
  updateProfileActivity(data: ProfileActivityUpdateInput!, where: ProfileActivityWhereUniqueInput!): ProfileActivity
  updateManyProfileActivities(data: ProfileActivityUpdateManyMutationInput!, where: ProfileActivityWhereInput): BatchPayload!
  upsertProfileActivity(where: ProfileActivityWhereUniqueInput!, create: ProfileActivityCreateInput!, update: ProfileActivityUpdateInput!): ProfileActivity!
  deleteProfileActivity(where: ProfileActivityWhereUniqueInput!): ProfileActivity
  deleteManyProfileActivities(where: ProfileActivityWhereInput): BatchPayload!
  createQuestionnaires(data: QuestionnairesCreateInput!): Questionnaires!
  updateQuestionnaires(data: QuestionnairesUpdateInput!, where: QuestionnairesWhereUniqueInput!): Questionnaires
  upsertQuestionnaires(where: QuestionnairesWhereUniqueInput!, create: QuestionnairesCreateInput!, update: QuestionnairesUpdateInput!): Questionnaires!
  deleteQuestionnaires(where: QuestionnairesWhereUniqueInput!): Questionnaires
  deleteManyQuestionnaireses(where: QuestionnairesWhereInput): BatchPayload!
  createScheduledTask(data: ScheduledTaskCreateInput!): ScheduledTask!
  updateScheduledTask(data: ScheduledTaskUpdateInput!, where: ScheduledTaskWhereUniqueInput!): ScheduledTask
  updateManyScheduledTasks(data: ScheduledTaskUpdateManyMutationInput!, where: ScheduledTaskWhereInput): BatchPayload!
  upsertScheduledTask(where: ScheduledTaskWhereUniqueInput!, create: ScheduledTaskCreateInput!, update: ScheduledTaskUpdateInput!): ScheduledTask!
  deleteScheduledTask(where: ScheduledTaskWhereUniqueInput!): ScheduledTask
  deleteManyScheduledTasks(where: ScheduledTaskWhereInput): BatchPayload!
  createSensorData(data: SensorDataCreateInput!): SensorData!
  updateSensorData(data: SensorDataUpdateInput!, where: SensorDataWhereUniqueInput!): SensorData
  updateManySensorDatas(data: SensorDataUpdateManyMutationInput!, where: SensorDataWhereInput): BatchPayload!
  upsertSensorData(where: SensorDataWhereUniqueInput!, create: SensorDataCreateInput!, update: SensorDataUpdateInput!): SensorData!
  deleteSensorData(where: SensorDataWhereUniqueInput!): SensorData
  deleteManySensorDatas(where: SensorDataWhereInput): BatchPayload!
  createTimeSpan(data: TimeSpanCreateInput!): TimeSpan!
  updateTimeSpan(data: TimeSpanUpdateInput!, where: TimeSpanWhereUniqueInput!): TimeSpan
  updateManyTimeSpans(data: TimeSpanUpdateManyMutationInput!, where: TimeSpanWhereInput): BatchPayload!
  upsertTimeSpan(where: TimeSpanWhereUniqueInput!, create: TimeSpanCreateInput!, update: TimeSpanUpdateInput!): TimeSpan!
  deleteTimeSpan(where: TimeSpanWhereUniqueInput!): TimeSpan
  deleteManyTimeSpans(where: TimeSpanWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserSettings(data: UserSettingsCreateInput!): UserSettings!
  updateUserSettings(data: UserSettingsUpdateInput!, where: UserSettingsWhereUniqueInput!): UserSettings
  updateManyUserSettingses(data: UserSettingsUpdateManyMutationInput!, where: UserSettingsWhereInput): BatchPayload!
  upsertUserSettings(where: UserSettingsWhereUniqueInput!, create: UserSettingsCreateInput!, update: UserSettingsUpdateInput!): UserSettings!
  deleteUserSettings(where: UserSettingsWhereUniqueInput!): UserSettings
  deleteManyUserSettingses(where: UserSettingsWhereInput): BatchPayload!
  createVoting(data: VotingCreateInput!): Voting!
  updateVoting(data: VotingUpdateInput!, where: VotingWhereUniqueInput!): Voting
  updateManyVotings(data: VotingUpdateManyMutationInput!, where: VotingWhereInput): BatchPayload!
  upsertVoting(where: VotingWhereUniqueInput!, create: VotingCreateInput!, update: VotingUpdateInput!): Voting!
  deleteVoting(where: VotingWhereUniqueInput!): Voting
  deleteManyVotings(where: VotingWhereInput): BatchPayload!
  createWebPushNotification(data: WebPushNotificationCreateInput!): WebPushNotification!
  updateWebPushNotification(data: WebPushNotificationUpdateInput!, where: WebPushNotificationWhereUniqueInput!): WebPushNotification
  updateManyWebPushNotifications(data: WebPushNotificationUpdateManyMutationInput!, where: WebPushNotificationWhereInput): BatchPayload!
  upsertWebPushNotification(where: WebPushNotificationWhereUniqueInput!, create: WebPushNotificationCreateInput!, update: WebPushNotificationUpdateInput!): WebPushNotification!
  deleteWebPushNotification(where: WebPushNotificationWhereUniqueInput!): WebPushNotification
  deleteManyWebPushNotifications(where: WebPushNotificationWhereInput): BatchPayload!
  createWebPushSettings(data: WebPushSettingsCreateInput!): WebPushSettings!
  updateWebPushSettings(data: WebPushSettingsUpdateInput!, where: WebPushSettingsWhereUniqueInput!): WebPushSettings
  updateManyWebPushSettingses(data: WebPushSettingsUpdateManyMutationInput!, where: WebPushSettingsWhereInput): BatchPayload!
  upsertWebPushSettings(where: WebPushSettingsWhereUniqueInput!, create: WebPushSettingsCreateInput!, update: WebPushSettingsUpdateInput!): WebPushSettings!
  deleteWebPushSettings(where: WebPushSettingsWhereUniqueInput!): WebPushSettings
  deleteManyWebPushSettingses(where: WebPushSettingsWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Patient {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  verificationCode: String!
  verified: Boolean
  profile: PatientProfileInfo
  buddy: Buddy
  quests: Questionnaires
  online: Boolean
  activities(where: ActivityWhereInput, orderBy: ActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Activity!]
  favoriteActivities(where: FavoriteActivityWhereInput, orderBy: FavoriteActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FavoriteActivity!]
  calendarEntries(where: CalendarEntryWhereInput, orderBy: CalendarEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CalendarEntry!]
  activeMinutesPerWeek: Int
  user: User
}

type PatientConnection {
  pageInfo: PageInfo!
  edges: [PatientEdge]!
  aggregate: AggregatePatient!
}

input PatientCreateInput {
  id: ID
  verificationCode: String!
  verified: Boolean
  profile: PatientProfileInfoCreateOneInput
  buddy: BuddyCreateOneWithoutPatientInput
  quests: QuestionnairesCreateOneWithoutPatientInput
  online: Boolean
  activities: ActivityCreateManyInput
  favoriteActivities: FavoriteActivityCreateManyInput
  calendarEntries: CalendarEntryCreateManyWithoutPatientInput
  activeMinutesPerWeek: Int
  user: UserCreateOneWithoutPatientInput
}

input PatientCreateOneInput {
  create: PatientCreateInput
  connect: PatientWhereUniqueInput
}

input PatientCreateOneWithoutBuddyInput {
  create: PatientCreateWithoutBuddyInput
  connect: PatientWhereUniqueInput
}

input PatientCreateOneWithoutCalendarEntriesInput {
  create: PatientCreateWithoutCalendarEntriesInput
  connect: PatientWhereUniqueInput
}

input PatientCreateOneWithoutQuestsInput {
  create: PatientCreateWithoutQuestsInput
  connect: PatientWhereUniqueInput
}

input PatientCreateOneWithoutUserInput {
  create: PatientCreateWithoutUserInput
  connect: PatientWhereUniqueInput
}

input PatientCreateWithoutBuddyInput {
  id: ID
  verificationCode: String!
  verified: Boolean
  profile: PatientProfileInfoCreateOneInput
  quests: QuestionnairesCreateOneWithoutPatientInput
  online: Boolean
  activities: ActivityCreateManyInput
  favoriteActivities: FavoriteActivityCreateManyInput
  calendarEntries: CalendarEntryCreateManyWithoutPatientInput
  activeMinutesPerWeek: Int
  user: UserCreateOneWithoutPatientInput
}

input PatientCreateWithoutCalendarEntriesInput {
  id: ID
  verificationCode: String!
  verified: Boolean
  profile: PatientProfileInfoCreateOneInput
  buddy: BuddyCreateOneWithoutPatientInput
  quests: QuestionnairesCreateOneWithoutPatientInput
  online: Boolean
  activities: ActivityCreateManyInput
  favoriteActivities: FavoriteActivityCreateManyInput
  activeMinutesPerWeek: Int
  user: UserCreateOneWithoutPatientInput
}

input PatientCreateWithoutQuestsInput {
  id: ID
  verificationCode: String!
  verified: Boolean
  profile: PatientProfileInfoCreateOneInput
  buddy: BuddyCreateOneWithoutPatientInput
  online: Boolean
  activities: ActivityCreateManyInput
  favoriteActivities: FavoriteActivityCreateManyInput
  calendarEntries: CalendarEntryCreateManyWithoutPatientInput
  activeMinutesPerWeek: Int
  user: UserCreateOneWithoutPatientInput
}

input PatientCreateWithoutUserInput {
  id: ID
  verificationCode: String!
  verified: Boolean
  profile: PatientProfileInfoCreateOneInput
  buddy: BuddyCreateOneWithoutPatientInput
  quests: QuestionnairesCreateOneWithoutPatientInput
  online: Boolean
  activities: ActivityCreateManyInput
  favoriteActivities: FavoriteActivityCreateManyInput
  calendarEntries: CalendarEntryCreateManyWithoutPatientInput
  activeMinutesPerWeek: Int
}

type PatientEdge {
  node: Patient!
  cursor: String!
}

enum PatientOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  verificationCode_ASC
  verificationCode_DESC
  verified_ASC
  verified_DESC
  online_ASC
  online_DESC
  activeMinutesPerWeek_ASC
  activeMinutesPerWeek_DESC
}

type PatientPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  verificationCode: String!
  verified: Boolean
  online: Boolean
  activeMinutesPerWeek: Int
}

type PatientProfileInfo {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  birthday: DateTime
  gender: Gender
  sameGender: Boolean
  hideGender: Boolean
  meetingDesired: Boolean
  avatar: String!
  profileActivities(where: ProfileActivityWhereInput, orderBy: ProfileActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProfileActivity!]
}

type PatientProfileInfoConnection {
  pageInfo: PageInfo!
  edges: [PatientProfileInfoEdge]!
  aggregate: AggregatePatientProfileInfo!
}

input PatientProfileInfoCreateInput {
  id: ID
  birthday: DateTime
  gender: Gender
  sameGender: Boolean
  hideGender: Boolean
  meetingDesired: Boolean
  avatar: String
  profileActivities: ProfileActivityCreateManyInput
}

input PatientProfileInfoCreateOneInput {
  create: PatientProfileInfoCreateInput
  connect: PatientProfileInfoWhereUniqueInput
}

type PatientProfileInfoEdge {
  node: PatientProfileInfo!
  cursor: String!
}

enum PatientProfileInfoOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  birthday_ASC
  birthday_DESC
  gender_ASC
  gender_DESC
  sameGender_ASC
  sameGender_DESC
  hideGender_ASC
  hideGender_DESC
  meetingDesired_ASC
  meetingDesired_DESC
  avatar_ASC
  avatar_DESC
}

type PatientProfileInfoPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  birthday: DateTime
  gender: Gender
  sameGender: Boolean
  hideGender: Boolean
  meetingDesired: Boolean
  avatar: String!
}

type PatientProfileInfoSubscriptionPayload {
  mutation: MutationType!
  node: PatientProfileInfo
  updatedFields: [String!]
  previousValues: PatientProfileInfoPreviousValues
}

input PatientProfileInfoSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PatientProfileInfoWhereInput
  AND: [PatientProfileInfoSubscriptionWhereInput!]
  OR: [PatientProfileInfoSubscriptionWhereInput!]
  NOT: [PatientProfileInfoSubscriptionWhereInput!]
}

input PatientProfileInfoUpdateDataInput {
  birthday: DateTime
  gender: Gender
  sameGender: Boolean
  hideGender: Boolean
  meetingDesired: Boolean
  avatar: String
  profileActivities: ProfileActivityUpdateManyInput
}

input PatientProfileInfoUpdateInput {
  birthday: DateTime
  gender: Gender
  sameGender: Boolean
  hideGender: Boolean
  meetingDesired: Boolean
  avatar: String
  profileActivities: ProfileActivityUpdateManyInput
}

input PatientProfileInfoUpdateManyMutationInput {
  birthday: DateTime
  gender: Gender
  sameGender: Boolean
  hideGender: Boolean
  meetingDesired: Boolean
  avatar: String
}

input PatientProfileInfoUpdateOneInput {
  create: PatientProfileInfoCreateInput
  update: PatientProfileInfoUpdateDataInput
  upsert: PatientProfileInfoUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: PatientProfileInfoWhereUniqueInput
}

input PatientProfileInfoUpsertNestedInput {
  update: PatientProfileInfoUpdateDataInput!
  create: PatientProfileInfoCreateInput!
}

input PatientProfileInfoWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  birthday: DateTime
  birthday_not: DateTime
  birthday_in: [DateTime!]
  birthday_not_in: [DateTime!]
  birthday_lt: DateTime
  birthday_lte: DateTime
  birthday_gt: DateTime
  birthday_gte: DateTime
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  sameGender: Boolean
  sameGender_not: Boolean
  hideGender: Boolean
  hideGender_not: Boolean
  meetingDesired: Boolean
  meetingDesired_not: Boolean
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  profileActivities_every: ProfileActivityWhereInput
  profileActivities_some: ProfileActivityWhereInput
  profileActivities_none: ProfileActivityWhereInput
  AND: [PatientProfileInfoWhereInput!]
  OR: [PatientProfileInfoWhereInput!]
  NOT: [PatientProfileInfoWhereInput!]
}

input PatientProfileInfoWhereUniqueInput {
  id: ID
}

type PatientSubscriptionPayload {
  mutation: MutationType!
  node: Patient
  updatedFields: [String!]
  previousValues: PatientPreviousValues
}

input PatientSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PatientWhereInput
  AND: [PatientSubscriptionWhereInput!]
  OR: [PatientSubscriptionWhereInput!]
  NOT: [PatientSubscriptionWhereInput!]
}

input PatientUpdateDataInput {
  verificationCode: String
  verified: Boolean
  profile: PatientProfileInfoUpdateOneInput
  buddy: BuddyUpdateOneWithoutPatientInput
  quests: QuestionnairesUpdateOneWithoutPatientInput
  online: Boolean
  activities: ActivityUpdateManyInput
  favoriteActivities: FavoriteActivityUpdateManyInput
  calendarEntries: CalendarEntryUpdateManyWithoutPatientInput
  activeMinutesPerWeek: Int
  user: UserUpdateOneWithoutPatientInput
}

input PatientUpdateInput {
  verificationCode: String
  verified: Boolean
  profile: PatientProfileInfoUpdateOneInput
  buddy: BuddyUpdateOneWithoutPatientInput
  quests: QuestionnairesUpdateOneWithoutPatientInput
  online: Boolean
  activities: ActivityUpdateManyInput
  favoriteActivities: FavoriteActivityUpdateManyInput
  calendarEntries: CalendarEntryUpdateManyWithoutPatientInput
  activeMinutesPerWeek: Int
  user: UserUpdateOneWithoutPatientInput
}

input PatientUpdateManyMutationInput {
  verificationCode: String
  verified: Boolean
  online: Boolean
  activeMinutesPerWeek: Int
}

input PatientUpdateOneInput {
  create: PatientCreateInput
  update: PatientUpdateDataInput
  upsert: PatientUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: PatientWhereUniqueInput
}

input PatientUpdateOneRequiredInput {
  create: PatientCreateInput
  update: PatientUpdateDataInput
  upsert: PatientUpsertNestedInput
  connect: PatientWhereUniqueInput
}

input PatientUpdateOneRequiredWithoutBuddyInput {
  create: PatientCreateWithoutBuddyInput
  update: PatientUpdateWithoutBuddyDataInput
  upsert: PatientUpsertWithoutBuddyInput
  connect: PatientWhereUniqueInput
}

input PatientUpdateOneWithoutCalendarEntriesInput {
  create: PatientCreateWithoutCalendarEntriesInput
  update: PatientUpdateWithoutCalendarEntriesDataInput
  upsert: PatientUpsertWithoutCalendarEntriesInput
  delete: Boolean
  disconnect: Boolean
  connect: PatientWhereUniqueInput
}

input PatientUpdateOneWithoutQuestsInput {
  create: PatientCreateWithoutQuestsInput
  update: PatientUpdateWithoutQuestsDataInput
  upsert: PatientUpsertWithoutQuestsInput
  delete: Boolean
  disconnect: Boolean
  connect: PatientWhereUniqueInput
}

input PatientUpdateOneWithoutUserInput {
  create: PatientCreateWithoutUserInput
  update: PatientUpdateWithoutUserDataInput
  upsert: PatientUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  connect: PatientWhereUniqueInput
}

input PatientUpdateWithoutBuddyDataInput {
  verificationCode: String
  verified: Boolean
  profile: PatientProfileInfoUpdateOneInput
  quests: QuestionnairesUpdateOneWithoutPatientInput
  online: Boolean
  activities: ActivityUpdateManyInput
  favoriteActivities: FavoriteActivityUpdateManyInput
  calendarEntries: CalendarEntryUpdateManyWithoutPatientInput
  activeMinutesPerWeek: Int
  user: UserUpdateOneWithoutPatientInput
}

input PatientUpdateWithoutCalendarEntriesDataInput {
  verificationCode: String
  verified: Boolean
  profile: PatientProfileInfoUpdateOneInput
  buddy: BuddyUpdateOneWithoutPatientInput
  quests: QuestionnairesUpdateOneWithoutPatientInput
  online: Boolean
  activities: ActivityUpdateManyInput
  favoriteActivities: FavoriteActivityUpdateManyInput
  activeMinutesPerWeek: Int
  user: UserUpdateOneWithoutPatientInput
}

input PatientUpdateWithoutQuestsDataInput {
  verificationCode: String
  verified: Boolean
  profile: PatientProfileInfoUpdateOneInput
  buddy: BuddyUpdateOneWithoutPatientInput
  online: Boolean
  activities: ActivityUpdateManyInput
  favoriteActivities: FavoriteActivityUpdateManyInput
  calendarEntries: CalendarEntryUpdateManyWithoutPatientInput
  activeMinutesPerWeek: Int
  user: UserUpdateOneWithoutPatientInput
}

input PatientUpdateWithoutUserDataInput {
  verificationCode: String
  verified: Boolean
  profile: PatientProfileInfoUpdateOneInput
  buddy: BuddyUpdateOneWithoutPatientInput
  quests: QuestionnairesUpdateOneWithoutPatientInput
  online: Boolean
  activities: ActivityUpdateManyInput
  favoriteActivities: FavoriteActivityUpdateManyInput
  calendarEntries: CalendarEntryUpdateManyWithoutPatientInput
  activeMinutesPerWeek: Int
}

input PatientUpsertNestedInput {
  update: PatientUpdateDataInput!
  create: PatientCreateInput!
}

input PatientUpsertWithoutBuddyInput {
  update: PatientUpdateWithoutBuddyDataInput!
  create: PatientCreateWithoutBuddyInput!
}

input PatientUpsertWithoutCalendarEntriesInput {
  update: PatientUpdateWithoutCalendarEntriesDataInput!
  create: PatientCreateWithoutCalendarEntriesInput!
}

input PatientUpsertWithoutQuestsInput {
  update: PatientUpdateWithoutQuestsDataInput!
  create: PatientCreateWithoutQuestsInput!
}

input PatientUpsertWithoutUserInput {
  update: PatientUpdateWithoutUserDataInput!
  create: PatientCreateWithoutUserInput!
}

input PatientWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  verificationCode: String
  verificationCode_not: String
  verificationCode_in: [String!]
  verificationCode_not_in: [String!]
  verificationCode_lt: String
  verificationCode_lte: String
  verificationCode_gt: String
  verificationCode_gte: String
  verificationCode_contains: String
  verificationCode_not_contains: String
  verificationCode_starts_with: String
  verificationCode_not_starts_with: String
  verificationCode_ends_with: String
  verificationCode_not_ends_with: String
  verified: Boolean
  verified_not: Boolean
  profile: PatientProfileInfoWhereInput
  buddy: BuddyWhereInput
  quests: QuestionnairesWhereInput
  online: Boolean
  online_not: Boolean
  activities_every: ActivityWhereInput
  activities_some: ActivityWhereInput
  activities_none: ActivityWhereInput
  favoriteActivities_every: FavoriteActivityWhereInput
  favoriteActivities_some: FavoriteActivityWhereInput
  favoriteActivities_none: FavoriteActivityWhereInput
  calendarEntries_every: CalendarEntryWhereInput
  calendarEntries_some: CalendarEntryWhereInput
  calendarEntries_none: CalendarEntryWhereInput
  activeMinutesPerWeek: Int
  activeMinutesPerWeek_not: Int
  activeMinutesPerWeek_in: [Int!]
  activeMinutesPerWeek_not_in: [Int!]
  activeMinutesPerWeek_lt: Int
  activeMinutesPerWeek_lte: Int
  activeMinutesPerWeek_gt: Int
  activeMinutesPerWeek_gte: Int
  user: UserWhereInput
  AND: [PatientWhereInput!]
  OR: [PatientWhereInput!]
  NOT: [PatientWhereInput!]
}

input PatientWhereUniqueInput {
  id: ID
}

type Phq9 {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  answers: [Int!]!
  score: Int
  isComplete: Boolean
  expiryDate: DateTime
  quests: Questionnaires!
}

type Phq9Connection {
  pageInfo: PageInfo!
  edges: [Phq9Edge]!
  aggregate: AggregatePhq9!
}

input Phq9CreateanswersInput {
  set: [Int!]
}

input Phq9CreateInput {
  id: ID
  answers: Phq9CreateanswersInput
  score: Int
  isComplete: Boolean
  expiryDate: DateTime
  quests: QuestionnairesCreateOneWithoutPhq9sInput!
}

input Phq9CreateManyWithoutQuestsInput {
  create: [Phq9CreateWithoutQuestsInput!]
  connect: [Phq9WhereUniqueInput!]
}

input Phq9CreateWithoutQuestsInput {
  id: ID
  answers: Phq9CreateanswersInput
  score: Int
  isComplete: Boolean
  expiryDate: DateTime
}

type Phq9Edge {
  node: Phq9!
  cursor: String!
}

enum Phq9OrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  score_ASC
  score_DESC
  isComplete_ASC
  isComplete_DESC
  expiryDate_ASC
  expiryDate_DESC
}

type Phq9PreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  answers: [Int!]!
  score: Int
  isComplete: Boolean
  expiryDate: DateTime
}

input Phq9ScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  score: Int
  score_not: Int
  score_in: [Int!]
  score_not_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  isComplete: Boolean
  isComplete_not: Boolean
  expiryDate: DateTime
  expiryDate_not: DateTime
  expiryDate_in: [DateTime!]
  expiryDate_not_in: [DateTime!]
  expiryDate_lt: DateTime
  expiryDate_lte: DateTime
  expiryDate_gt: DateTime
  expiryDate_gte: DateTime
  AND: [Phq9ScalarWhereInput!]
  OR: [Phq9ScalarWhereInput!]
  NOT: [Phq9ScalarWhereInput!]
}

type Phq9SubscriptionPayload {
  mutation: MutationType!
  node: Phq9
  updatedFields: [String!]
  previousValues: Phq9PreviousValues
}

input Phq9SubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: Phq9WhereInput
  AND: [Phq9SubscriptionWhereInput!]
  OR: [Phq9SubscriptionWhereInput!]
  NOT: [Phq9SubscriptionWhereInput!]
}

input Phq9UpdateanswersInput {
  set: [Int!]
}

input Phq9UpdateInput {
  answers: Phq9UpdateanswersInput
  score: Int
  isComplete: Boolean
  expiryDate: DateTime
  quests: QuestionnairesUpdateOneRequiredWithoutPhq9sInput
}

input Phq9UpdateManyDataInput {
  answers: Phq9UpdateanswersInput
  score: Int
  isComplete: Boolean
  expiryDate: DateTime
}

input Phq9UpdateManyMutationInput {
  answers: Phq9UpdateanswersInput
  score: Int
  isComplete: Boolean
  expiryDate: DateTime
}

input Phq9UpdateManyWithoutQuestsInput {
  create: [Phq9CreateWithoutQuestsInput!]
  delete: [Phq9WhereUniqueInput!]
  connect: [Phq9WhereUniqueInput!]
  set: [Phq9WhereUniqueInput!]
  disconnect: [Phq9WhereUniqueInput!]
  update: [Phq9UpdateWithWhereUniqueWithoutQuestsInput!]
  upsert: [Phq9UpsertWithWhereUniqueWithoutQuestsInput!]
  deleteMany: [Phq9ScalarWhereInput!]
  updateMany: [Phq9UpdateManyWithWhereNestedInput!]
}

input Phq9UpdateManyWithWhereNestedInput {
  where: Phq9ScalarWhereInput!
  data: Phq9UpdateManyDataInput!
}

input Phq9UpdateWithoutQuestsDataInput {
  answers: Phq9UpdateanswersInput
  score: Int
  isComplete: Boolean
  expiryDate: DateTime
}

input Phq9UpdateWithWhereUniqueWithoutQuestsInput {
  where: Phq9WhereUniqueInput!
  data: Phq9UpdateWithoutQuestsDataInput!
}

input Phq9UpsertWithWhereUniqueWithoutQuestsInput {
  where: Phq9WhereUniqueInput!
  update: Phq9UpdateWithoutQuestsDataInput!
  create: Phq9CreateWithoutQuestsInput!
}

input Phq9WhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  score: Int
  score_not: Int
  score_in: [Int!]
  score_not_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  isComplete: Boolean
  isComplete_not: Boolean
  expiryDate: DateTime
  expiryDate_not: DateTime
  expiryDate_in: [DateTime!]
  expiryDate_not_in: [DateTime!]
  expiryDate_lt: DateTime
  expiryDate_lte: DateTime
  expiryDate_gt: DateTime
  expiryDate_gte: DateTime
  quests: QuestionnairesWhereInput
  AND: [Phq9WhereInput!]
  OR: [Phq9WhereInput!]
  NOT: [Phq9WhereInput!]
}

input Phq9WhereUniqueInput {
  id: ID
}

type ProfileActivity {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  key: String!
  icon: String!
  titel: String!
}

type ProfileActivityConnection {
  pageInfo: PageInfo!
  edges: [ProfileActivityEdge]!
  aggregate: AggregateProfileActivity!
}

input ProfileActivityCreateInput {
  id: ID
  key: String!
  icon: String!
  titel: String!
}

input ProfileActivityCreateManyInput {
  create: [ProfileActivityCreateInput!]
  connect: [ProfileActivityWhereUniqueInput!]
}

type ProfileActivityEdge {
  node: ProfileActivity!
  cursor: String!
}

enum ProfileActivityOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  key_ASC
  key_DESC
  icon_ASC
  icon_DESC
  titel_ASC
  titel_DESC
}

type ProfileActivityPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  key: String!
  icon: String!
  titel: String!
}

input ProfileActivityScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  icon: String
  icon_not: String
  icon_in: [String!]
  icon_not_in: [String!]
  icon_lt: String
  icon_lte: String
  icon_gt: String
  icon_gte: String
  icon_contains: String
  icon_not_contains: String
  icon_starts_with: String
  icon_not_starts_with: String
  icon_ends_with: String
  icon_not_ends_with: String
  titel: String
  titel_not: String
  titel_in: [String!]
  titel_not_in: [String!]
  titel_lt: String
  titel_lte: String
  titel_gt: String
  titel_gte: String
  titel_contains: String
  titel_not_contains: String
  titel_starts_with: String
  titel_not_starts_with: String
  titel_ends_with: String
  titel_not_ends_with: String
  AND: [ProfileActivityScalarWhereInput!]
  OR: [ProfileActivityScalarWhereInput!]
  NOT: [ProfileActivityScalarWhereInput!]
}

type ProfileActivitySubscriptionPayload {
  mutation: MutationType!
  node: ProfileActivity
  updatedFields: [String!]
  previousValues: ProfileActivityPreviousValues
}

input ProfileActivitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProfileActivityWhereInput
  AND: [ProfileActivitySubscriptionWhereInput!]
  OR: [ProfileActivitySubscriptionWhereInput!]
  NOT: [ProfileActivitySubscriptionWhereInput!]
}

input ProfileActivityUpdateDataInput {
  key: String
  icon: String
  titel: String
}

input ProfileActivityUpdateInput {
  key: String
  icon: String
  titel: String
}

input ProfileActivityUpdateManyDataInput {
  key: String
  icon: String
  titel: String
}

input ProfileActivityUpdateManyInput {
  create: [ProfileActivityCreateInput!]
  update: [ProfileActivityUpdateWithWhereUniqueNestedInput!]
  upsert: [ProfileActivityUpsertWithWhereUniqueNestedInput!]
  delete: [ProfileActivityWhereUniqueInput!]
  connect: [ProfileActivityWhereUniqueInput!]
  set: [ProfileActivityWhereUniqueInput!]
  disconnect: [ProfileActivityWhereUniqueInput!]
  deleteMany: [ProfileActivityScalarWhereInput!]
  updateMany: [ProfileActivityUpdateManyWithWhereNestedInput!]
}

input ProfileActivityUpdateManyMutationInput {
  key: String
  icon: String
  titel: String
}

input ProfileActivityUpdateManyWithWhereNestedInput {
  where: ProfileActivityScalarWhereInput!
  data: ProfileActivityUpdateManyDataInput!
}

input ProfileActivityUpdateWithWhereUniqueNestedInput {
  where: ProfileActivityWhereUniqueInput!
  data: ProfileActivityUpdateDataInput!
}

input ProfileActivityUpsertWithWhereUniqueNestedInput {
  where: ProfileActivityWhereUniqueInput!
  update: ProfileActivityUpdateDataInput!
  create: ProfileActivityCreateInput!
}

input ProfileActivityWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  icon: String
  icon_not: String
  icon_in: [String!]
  icon_not_in: [String!]
  icon_lt: String
  icon_lte: String
  icon_gt: String
  icon_gte: String
  icon_contains: String
  icon_not_contains: String
  icon_starts_with: String
  icon_not_starts_with: String
  icon_ends_with: String
  icon_not_ends_with: String
  titel: String
  titel_not: String
  titel_in: [String!]
  titel_not_in: [String!]
  titel_lt: String
  titel_lte: String
  titel_gt: String
  titel_gte: String
  titel_contains: String
  titel_not_contains: String
  titel_starts_with: String
  titel_not_starts_with: String
  titel_ends_with: String
  titel_not_ends_with: String
  AND: [ProfileActivityWhereInput!]
  OR: [ProfileActivityWhereInput!]
  NOT: [ProfileActivityWhereInput!]
}

input ProfileActivityWhereUniqueInput {
  id: ID
  key: String
}

type Query {
  activity(where: ActivityWhereUniqueInput!): Activity
  activities(where: ActivityWhereInput, orderBy: ActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Activity]!
  activitiesConnection(where: ActivityWhereInput, orderBy: ActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActivityConnection!
  award(where: AwardWhereUniqueInput!): Award
  awards(where: AwardWhereInput, orderBy: AwardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Award]!
  awardsConnection(where: AwardWhereInput, orderBy: AwardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AwardConnection!
  bot(where: BotWhereUniqueInput!): Bot
  bots(where: BotWhereInput, orderBy: BotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bot]!
  botsConnection(where: BotWhereInput, orderBy: BotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BotConnection!
  botSettings(where: BotSettingsWhereUniqueInput!): BotSettings
  botSettingses(where: BotSettingsWhereInput, orderBy: BotSettingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BotSettings]!
  botSettingsesConnection(where: BotSettingsWhereInput, orderBy: BotSettingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BotSettingsConnection!
  buddy(where: BuddyWhereUniqueInput!): Buddy
  buddies(where: BuddyWhereInput, orderBy: BuddyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Buddy]!
  buddiesConnection(where: BuddyWhereInput, orderBy: BuddyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BuddyConnection!
  buddyRequest(where: BuddyRequestWhereUniqueInput!): BuddyRequest
  buddyRequests(where: BuddyRequestWhereInput, orderBy: BuddyRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BuddyRequest]!
  buddyRequestsConnection(where: BuddyRequestWhereInput, orderBy: BuddyRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BuddyRequestConnection!
  calendarEntry(where: CalendarEntryWhereUniqueInput!): CalendarEntry
  calendarEntries(where: CalendarEntryWhereInput, orderBy: CalendarEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CalendarEntry]!
  calendarEntriesConnection(where: CalendarEntryWhereInput, orderBy: CalendarEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CalendarEntryConnection!
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  challenge(where: ChallengeWhereUniqueInput!): Challenge
  challenges(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge]!
  challengesConnection(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChallengeConnection!
  challengeCategory(where: ChallengeCategoryWhereUniqueInput!): ChallengeCategory
  challengeCategories(where: ChallengeCategoryWhereInput, orderBy: ChallengeCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChallengeCategory]!
  challengeCategoriesConnection(where: ChallengeCategoryWhereInput, orderBy: ChallengeCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChallengeCategoryConnection!
  challengeGroup(where: ChallengeGroupWhereUniqueInput!): ChallengeGroup
  challengeGroups(where: ChallengeGroupWhereInput, orderBy: ChallengeGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChallengeGroup]!
  challengeGroupsConnection(where: ChallengeGroupWhereInput, orderBy: ChallengeGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChallengeGroupConnection!
  chat(where: ChatWhereUniqueInput!): Chat
  chats(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chat]!
  chatsConnection(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatConnection!
  chatMessage(where: ChatMessageWhereUniqueInput!): ChatMessage
  chatMessages(where: ChatMessageWhereInput, orderBy: ChatMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatMessage]!
  chatMessagesConnection(where: ChatMessageWhereInput, orderBy: ChatMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatMessageConnection!
  chatMessageAttachment(where: ChatMessageAttachmentWhereUniqueInput!): ChatMessageAttachment
  chatMessageAttachments(where: ChatMessageAttachmentWhereInput, orderBy: ChatMessageAttachmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatMessageAttachment]!
  chatMessageAttachmentsConnection(where: ChatMessageAttachmentWhereInput, orderBy: ChatMessageAttachmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatMessageAttachmentConnection!
  contribution(where: ContributionWhereUniqueInput!): Contribution
  contributions(where: ContributionWhereInput, orderBy: ContributionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contribution]!
  contributionsConnection(where: ContributionWhereInput, orderBy: ContributionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContributionConnection!
  favoriteActivity(where: FavoriteActivityWhereUniqueInput!): FavoriteActivity
  favoriteActivities(where: FavoriteActivityWhereInput, orderBy: FavoriteActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FavoriteActivity]!
  favoriteActivitiesConnection(where: FavoriteActivityWhereInput, orderBy: FavoriteActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FavoriteActivityConnection!
  globalSettings(where: GlobalSettingsWhereUniqueInput!): GlobalSettings
  globalSettingses(where: GlobalSettingsWhereInput, orderBy: GlobalSettingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GlobalSettings]!
  globalSettingsesConnection(where: GlobalSettingsWhereInput, orderBy: GlobalSettingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GlobalSettingsConnection!
  group(where: GroupWhereUniqueInput!): Group
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  groupColor(where: GroupColorWhereUniqueInput!): GroupColor
  groupColors(where: GroupColorWhereInput, orderBy: GroupColorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroupColor]!
  groupColorsConnection(where: GroupColorWhereInput, orderBy: GroupColorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupColorConnection!
  initiator(where: InitiatorWhereUniqueInput!): Initiator
  initiators(where: InitiatorWhereInput, orderBy: InitiatorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Initiator]!
  initiatorsConnection(where: InitiatorWhereInput, orderBy: InitiatorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InitiatorConnection!
  ipaq(where: IpaqWhereUniqueInput!): Ipaq
  ipaqs(where: IpaqWhereInput, orderBy: IpaqOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ipaq]!
  ipaqsConnection(where: IpaqWhereInput, orderBy: IpaqOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IpaqConnection!
  ipaqAnswers(where: IpaqAnswersWhereUniqueInput!): IpaqAnswers
  ipaqAnswerses(where: IpaqAnswersWhereInput, orderBy: IpaqAnswersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [IpaqAnswers]!
  ipaqAnswersesConnection(where: IpaqAnswersWhereInput, orderBy: IpaqAnswersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IpaqAnswersConnection!
  joinedChallenges(where: JoinedChallengesWhereUniqueInput!): JoinedChallenges
  joinedChallengeses(where: JoinedChallengesWhereInput, orderBy: JoinedChallengesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [JoinedChallenges]!
  joinedChallengesesConnection(where: JoinedChallengesWhereInput, orderBy: JoinedChallengesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): JoinedChallengesConnection!
  patient(where: PatientWhereUniqueInput!): Patient
  patients(where: PatientWhereInput, orderBy: PatientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Patient]!
  patientsConnection(where: PatientWhereInput, orderBy: PatientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PatientConnection!
  patientProfileInfo(where: PatientProfileInfoWhereUniqueInput!): PatientProfileInfo
  patientProfileInfoes(where: PatientProfileInfoWhereInput, orderBy: PatientProfileInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PatientProfileInfo]!
  patientProfileInfoesConnection(where: PatientProfileInfoWhereInput, orderBy: PatientProfileInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PatientProfileInfoConnection!
  phq9(where: Phq9WhereUniqueInput!): Phq9
  phq9s(where: Phq9WhereInput, orderBy: Phq9OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Phq9]!
  phq9sConnection(where: Phq9WhereInput, orderBy: Phq9OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Phq9Connection!
  profileActivity(where: ProfileActivityWhereUniqueInput!): ProfileActivity
  profileActivities(where: ProfileActivityWhereInput, orderBy: ProfileActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProfileActivity]!
  profileActivitiesConnection(where: ProfileActivityWhereInput, orderBy: ProfileActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfileActivityConnection!
  questionnaires(where: QuestionnairesWhereUniqueInput!): Questionnaires
  questionnaireses(where: QuestionnairesWhereInput, orderBy: QuestionnairesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Questionnaires]!
  questionnairesesConnection(where: QuestionnairesWhereInput, orderBy: QuestionnairesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionnairesConnection!
  scheduledTask(where: ScheduledTaskWhereUniqueInput!): ScheduledTask
  scheduledTasks(where: ScheduledTaskWhereInput, orderBy: ScheduledTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ScheduledTask]!
  scheduledTasksConnection(where: ScheduledTaskWhereInput, orderBy: ScheduledTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ScheduledTaskConnection!
  sensorData(where: SensorDataWhereUniqueInput!): SensorData
  sensorDatas(where: SensorDataWhereInput, orderBy: SensorDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorData]!
  sensorDatasConnection(where: SensorDataWhereInput, orderBy: SensorDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SensorDataConnection!
  timeSpan(where: TimeSpanWhereUniqueInput!): TimeSpan
  timeSpans(where: TimeSpanWhereInput, orderBy: TimeSpanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeSpan]!
  timeSpansConnection(where: TimeSpanWhereInput, orderBy: TimeSpanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TimeSpanConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userSettings(where: UserSettingsWhereUniqueInput!): UserSettings
  userSettingses(where: UserSettingsWhereInput, orderBy: UserSettingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserSettings]!
  userSettingsesConnection(where: UserSettingsWhereInput, orderBy: UserSettingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserSettingsConnection!
  voting(where: VotingWhereUniqueInput!): Voting
  votings(where: VotingWhereInput, orderBy: VotingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Voting]!
  votingsConnection(where: VotingWhereInput, orderBy: VotingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VotingConnection!
  webPushNotification(where: WebPushNotificationWhereUniqueInput!): WebPushNotification
  webPushNotifications(where: WebPushNotificationWhereInput, orderBy: WebPushNotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WebPushNotification]!
  webPushNotificationsConnection(where: WebPushNotificationWhereInput, orderBy: WebPushNotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WebPushNotificationConnection!
  webPushSettings(where: WebPushSettingsWhereUniqueInput!): WebPushSettings
  webPushSettingses(where: WebPushSettingsWhereInput, orderBy: WebPushSettingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WebPushSettings]!
  webPushSettingsesConnection(where: WebPushSettingsWhereInput, orderBy: WebPushSettingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WebPushSettingsConnection!
  node(id: ID!): Node
}

type Questionnaires {
  id: ID!
  phq9s(where: Phq9WhereInput, orderBy: Phq9OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Phq9!]
  ipaqs(where: IpaqWhereInput, orderBy: IpaqOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ipaq!]
  patient: Patient
}

type QuestionnairesConnection {
  pageInfo: PageInfo!
  edges: [QuestionnairesEdge]!
  aggregate: AggregateQuestionnaires!
}

input QuestionnairesCreateInput {
  id: ID
  phq9s: Phq9CreateManyWithoutQuestsInput
  ipaqs: IpaqCreateManyWithoutQuestsInput
  patient: PatientCreateOneWithoutQuestsInput
}

input QuestionnairesCreateOneWithoutIpaqsInput {
  create: QuestionnairesCreateWithoutIpaqsInput
  connect: QuestionnairesWhereUniqueInput
}

input QuestionnairesCreateOneWithoutPatientInput {
  create: QuestionnairesCreateWithoutPatientInput
  connect: QuestionnairesWhereUniqueInput
}

input QuestionnairesCreateOneWithoutPhq9sInput {
  create: QuestionnairesCreateWithoutPhq9sInput
  connect: QuestionnairesWhereUniqueInput
}

input QuestionnairesCreateWithoutIpaqsInput {
  id: ID
  phq9s: Phq9CreateManyWithoutQuestsInput
  patient: PatientCreateOneWithoutQuestsInput
}

input QuestionnairesCreateWithoutPatientInput {
  id: ID
  phq9s: Phq9CreateManyWithoutQuestsInput
  ipaqs: IpaqCreateManyWithoutQuestsInput
}

input QuestionnairesCreateWithoutPhq9sInput {
  id: ID
  ipaqs: IpaqCreateManyWithoutQuestsInput
  patient: PatientCreateOneWithoutQuestsInput
}

type QuestionnairesEdge {
  node: Questionnaires!
  cursor: String!
}

enum QuestionnairesOrderByInput {
  id_ASC
  id_DESC
}

type QuestionnairesPreviousValues {
  id: ID!
}

type QuestionnairesSubscriptionPayload {
  mutation: MutationType!
  node: Questionnaires
  updatedFields: [String!]
  previousValues: QuestionnairesPreviousValues
}

input QuestionnairesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QuestionnairesWhereInput
  AND: [QuestionnairesSubscriptionWhereInput!]
  OR: [QuestionnairesSubscriptionWhereInput!]
  NOT: [QuestionnairesSubscriptionWhereInput!]
}

input QuestionnairesUpdateInput {
  phq9s: Phq9UpdateManyWithoutQuestsInput
  ipaqs: IpaqUpdateManyWithoutQuestsInput
  patient: PatientUpdateOneWithoutQuestsInput
}

input QuestionnairesUpdateOneRequiredWithoutIpaqsInput {
  create: QuestionnairesCreateWithoutIpaqsInput
  update: QuestionnairesUpdateWithoutIpaqsDataInput
  upsert: QuestionnairesUpsertWithoutIpaqsInput
  connect: QuestionnairesWhereUniqueInput
}

input QuestionnairesUpdateOneRequiredWithoutPhq9sInput {
  create: QuestionnairesCreateWithoutPhq9sInput
  update: QuestionnairesUpdateWithoutPhq9sDataInput
  upsert: QuestionnairesUpsertWithoutPhq9sInput
  connect: QuestionnairesWhereUniqueInput
}

input QuestionnairesUpdateOneWithoutPatientInput {
  create: QuestionnairesCreateWithoutPatientInput
  update: QuestionnairesUpdateWithoutPatientDataInput
  upsert: QuestionnairesUpsertWithoutPatientInput
  delete: Boolean
  disconnect: Boolean
  connect: QuestionnairesWhereUniqueInput
}

input QuestionnairesUpdateWithoutIpaqsDataInput {
  phq9s: Phq9UpdateManyWithoutQuestsInput
  patient: PatientUpdateOneWithoutQuestsInput
}

input QuestionnairesUpdateWithoutPatientDataInput {
  phq9s: Phq9UpdateManyWithoutQuestsInput
  ipaqs: IpaqUpdateManyWithoutQuestsInput
}

input QuestionnairesUpdateWithoutPhq9sDataInput {
  ipaqs: IpaqUpdateManyWithoutQuestsInput
  patient: PatientUpdateOneWithoutQuestsInput
}

input QuestionnairesUpsertWithoutIpaqsInput {
  update: QuestionnairesUpdateWithoutIpaqsDataInput!
  create: QuestionnairesCreateWithoutIpaqsInput!
}

input QuestionnairesUpsertWithoutPatientInput {
  update: QuestionnairesUpdateWithoutPatientDataInput!
  create: QuestionnairesCreateWithoutPatientInput!
}

input QuestionnairesUpsertWithoutPhq9sInput {
  update: QuestionnairesUpdateWithoutPhq9sDataInput!
  create: QuestionnairesCreateWithoutPhq9sInput!
}

input QuestionnairesWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  phq9s_every: Phq9WhereInput
  phq9s_some: Phq9WhereInput
  phq9s_none: Phq9WhereInput
  ipaqs_every: IpaqWhereInput
  ipaqs_some: IpaqWhereInput
  ipaqs_none: IpaqWhereInput
  patient: PatientWhereInput
  AND: [QuestionnairesWhereInput!]
  OR: [QuestionnairesWhereInput!]
  NOT: [QuestionnairesWhereInput!]
}

input QuestionnairesWhereUniqueInput {
  id: ID
}

type ScheduledTask {
  id: ID!
  updatedAt: DateTime
  scheduledFor: DateTime
  taskType: TaskTypes!
  userId: ID
  chatId: ID
  buddyRequestId: ID
}

type ScheduledTaskConnection {
  pageInfo: PageInfo!
  edges: [ScheduledTaskEdge]!
  aggregate: AggregateScheduledTask!
}

input ScheduledTaskCreateInput {
  id: ID
  scheduledFor: DateTime
  taskType: TaskTypes!
  userId: ID
  chatId: ID
  buddyRequestId: ID
}

type ScheduledTaskEdge {
  node: ScheduledTask!
  cursor: String!
}

enum ScheduledTaskOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  scheduledFor_ASC
  scheduledFor_DESC
  taskType_ASC
  taskType_DESC
  userId_ASC
  userId_DESC
  chatId_ASC
  chatId_DESC
  buddyRequestId_ASC
  buddyRequestId_DESC
}

type ScheduledTaskPreviousValues {
  id: ID!
  updatedAt: DateTime
  scheduledFor: DateTime
  taskType: TaskTypes!
  userId: ID
  chatId: ID
  buddyRequestId: ID
}

type ScheduledTaskSubscriptionPayload {
  mutation: MutationType!
  node: ScheduledTask
  updatedFields: [String!]
  previousValues: ScheduledTaskPreviousValues
}

input ScheduledTaskSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ScheduledTaskWhereInput
  AND: [ScheduledTaskSubscriptionWhereInput!]
  OR: [ScheduledTaskSubscriptionWhereInput!]
  NOT: [ScheduledTaskSubscriptionWhereInput!]
}

input ScheduledTaskUpdateInput {
  scheduledFor: DateTime
  taskType: TaskTypes
  userId: ID
  chatId: ID
  buddyRequestId: ID
}

input ScheduledTaskUpdateManyMutationInput {
  scheduledFor: DateTime
  taskType: TaskTypes
  userId: ID
  chatId: ID
  buddyRequestId: ID
}

input ScheduledTaskWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  scheduledFor: DateTime
  scheduledFor_not: DateTime
  scheduledFor_in: [DateTime!]
  scheduledFor_not_in: [DateTime!]
  scheduledFor_lt: DateTime
  scheduledFor_lte: DateTime
  scheduledFor_gt: DateTime
  scheduledFor_gte: DateTime
  taskType: TaskTypes
  taskType_not: TaskTypes
  taskType_in: [TaskTypes!]
  taskType_not_in: [TaskTypes!]
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  chatId: ID
  chatId_not: ID
  chatId_in: [ID!]
  chatId_not_in: [ID!]
  chatId_lt: ID
  chatId_lte: ID
  chatId_gt: ID
  chatId_gte: ID
  chatId_contains: ID
  chatId_not_contains: ID
  chatId_starts_with: ID
  chatId_not_starts_with: ID
  chatId_ends_with: ID
  chatId_not_ends_with: ID
  buddyRequestId: ID
  buddyRequestId_not: ID
  buddyRequestId_in: [ID!]
  buddyRequestId_not_in: [ID!]
  buddyRequestId_lt: ID
  buddyRequestId_lte: ID
  buddyRequestId_gt: ID
  buddyRequestId_gte: ID
  buddyRequestId_contains: ID
  buddyRequestId_not_contains: ID
  buddyRequestId_starts_with: ID
  buddyRequestId_not_starts_with: ID
  buddyRequestId_ends_with: ID
  buddyRequestId_not_ends_with: ID
  AND: [ScheduledTaskWhereInput!]
  OR: [ScheduledTaskWhereInput!]
  NOT: [ScheduledTaskWhereInput!]
}

input ScheduledTaskWhereUniqueInput {
  id: ID
}

type SensorData {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  type: String!
  x: Float
  y: Float
  z: Float
  alpha: Float
  beta: Float
  gamma: Float
}

type SensorDataConnection {
  pageInfo: PageInfo!
  edges: [SensorDataEdge]!
  aggregate: AggregateSensorData!
}

input SensorDataCreateInput {
  id: ID
  type: String!
  x: Float
  y: Float
  z: Float
  alpha: Float
  beta: Float
  gamma: Float
}

input SensorDataCreateManyInput {
  create: [SensorDataCreateInput!]
  connect: [SensorDataWhereUniqueInput!]
}

type SensorDataEdge {
  node: SensorData!
  cursor: String!
}

enum SensorDataOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  type_ASC
  type_DESC
  x_ASC
  x_DESC
  y_ASC
  y_DESC
  z_ASC
  z_DESC
  alpha_ASC
  alpha_DESC
  beta_ASC
  beta_DESC
  gamma_ASC
  gamma_DESC
}

type SensorDataPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  type: String!
  x: Float
  y: Float
  z: Float
  alpha: Float
  beta: Float
  gamma: Float
}

input SensorDataScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  x: Float
  x_not: Float
  x_in: [Float!]
  x_not_in: [Float!]
  x_lt: Float
  x_lte: Float
  x_gt: Float
  x_gte: Float
  y: Float
  y_not: Float
  y_in: [Float!]
  y_not_in: [Float!]
  y_lt: Float
  y_lte: Float
  y_gt: Float
  y_gte: Float
  z: Float
  z_not: Float
  z_in: [Float!]
  z_not_in: [Float!]
  z_lt: Float
  z_lte: Float
  z_gt: Float
  z_gte: Float
  alpha: Float
  alpha_not: Float
  alpha_in: [Float!]
  alpha_not_in: [Float!]
  alpha_lt: Float
  alpha_lte: Float
  alpha_gt: Float
  alpha_gte: Float
  beta: Float
  beta_not: Float
  beta_in: [Float!]
  beta_not_in: [Float!]
  beta_lt: Float
  beta_lte: Float
  beta_gt: Float
  beta_gte: Float
  gamma: Float
  gamma_not: Float
  gamma_in: [Float!]
  gamma_not_in: [Float!]
  gamma_lt: Float
  gamma_lte: Float
  gamma_gt: Float
  gamma_gte: Float
  AND: [SensorDataScalarWhereInput!]
  OR: [SensorDataScalarWhereInput!]
  NOT: [SensorDataScalarWhereInput!]
}

type SensorDataSubscriptionPayload {
  mutation: MutationType!
  node: SensorData
  updatedFields: [String!]
  previousValues: SensorDataPreviousValues
}

input SensorDataSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SensorDataWhereInput
  AND: [SensorDataSubscriptionWhereInput!]
  OR: [SensorDataSubscriptionWhereInput!]
  NOT: [SensorDataSubscriptionWhereInput!]
}

input SensorDataUpdateDataInput {
  type: String
  x: Float
  y: Float
  z: Float
  alpha: Float
  beta: Float
  gamma: Float
}

input SensorDataUpdateInput {
  type: String
  x: Float
  y: Float
  z: Float
  alpha: Float
  beta: Float
  gamma: Float
}

input SensorDataUpdateManyDataInput {
  type: String
  x: Float
  y: Float
  z: Float
  alpha: Float
  beta: Float
  gamma: Float
}

input SensorDataUpdateManyInput {
  create: [SensorDataCreateInput!]
  update: [SensorDataUpdateWithWhereUniqueNestedInput!]
  upsert: [SensorDataUpsertWithWhereUniqueNestedInput!]
  delete: [SensorDataWhereUniqueInput!]
  connect: [SensorDataWhereUniqueInput!]
  set: [SensorDataWhereUniqueInput!]
  disconnect: [SensorDataWhereUniqueInput!]
  deleteMany: [SensorDataScalarWhereInput!]
  updateMany: [SensorDataUpdateManyWithWhereNestedInput!]
}

input SensorDataUpdateManyMutationInput {
  type: String
  x: Float
  y: Float
  z: Float
  alpha: Float
  beta: Float
  gamma: Float
}

input SensorDataUpdateManyWithWhereNestedInput {
  where: SensorDataScalarWhereInput!
  data: SensorDataUpdateManyDataInput!
}

input SensorDataUpdateWithWhereUniqueNestedInput {
  where: SensorDataWhereUniqueInput!
  data: SensorDataUpdateDataInput!
}

input SensorDataUpsertWithWhereUniqueNestedInput {
  where: SensorDataWhereUniqueInput!
  update: SensorDataUpdateDataInput!
  create: SensorDataCreateInput!
}

input SensorDataWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  x: Float
  x_not: Float
  x_in: [Float!]
  x_not_in: [Float!]
  x_lt: Float
  x_lte: Float
  x_gt: Float
  x_gte: Float
  y: Float
  y_not: Float
  y_in: [Float!]
  y_not_in: [Float!]
  y_lt: Float
  y_lte: Float
  y_gt: Float
  y_gte: Float
  z: Float
  z_not: Float
  z_in: [Float!]
  z_not_in: [Float!]
  z_lt: Float
  z_lte: Float
  z_gt: Float
  z_gte: Float
  alpha: Float
  alpha_not: Float
  alpha_in: [Float!]
  alpha_not_in: [Float!]
  alpha_lt: Float
  alpha_lte: Float
  alpha_gt: Float
  alpha_gte: Float
  beta: Float
  beta_not: Float
  beta_in: [Float!]
  beta_not_in: [Float!]
  beta_lt: Float
  beta_lte: Float
  beta_gt: Float
  beta_gte: Float
  gamma: Float
  gamma_not: Float
  gamma_in: [Float!]
  gamma_not_in: [Float!]
  gamma_lt: Float
  gamma_lte: Float
  gamma_gt: Float
  gamma_gte: Float
  AND: [SensorDataWhereInput!]
  OR: [SensorDataWhereInput!]
  NOT: [SensorDataWhereInput!]
}

input SensorDataWhereUniqueInput {
  id: ID
}

enum StatusChallegen {
  ERSTELLT
  GESTARTED
  BEENDET
}

type Subscription {
  activity(where: ActivitySubscriptionWhereInput): ActivitySubscriptionPayload
  award(where: AwardSubscriptionWhereInput): AwardSubscriptionPayload
  bot(where: BotSubscriptionWhereInput): BotSubscriptionPayload
  botSettings(where: BotSettingsSubscriptionWhereInput): BotSettingsSubscriptionPayload
  buddy(where: BuddySubscriptionWhereInput): BuddySubscriptionPayload
  buddyRequest(where: BuddyRequestSubscriptionWhereInput): BuddyRequestSubscriptionPayload
  calendarEntry(where: CalendarEntrySubscriptionWhereInput): CalendarEntrySubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  challenge(where: ChallengeSubscriptionWhereInput): ChallengeSubscriptionPayload
  challengeCategory(where: ChallengeCategorySubscriptionWhereInput): ChallengeCategorySubscriptionPayload
  challengeGroup(where: ChallengeGroupSubscriptionWhereInput): ChallengeGroupSubscriptionPayload
  chat(where: ChatSubscriptionWhereInput): ChatSubscriptionPayload
  chatMessage(where: ChatMessageSubscriptionWhereInput): ChatMessageSubscriptionPayload
  chatMessageAttachment(where: ChatMessageAttachmentSubscriptionWhereInput): ChatMessageAttachmentSubscriptionPayload
  contribution(where: ContributionSubscriptionWhereInput): ContributionSubscriptionPayload
  favoriteActivity(where: FavoriteActivitySubscriptionWhereInput): FavoriteActivitySubscriptionPayload
  globalSettings(where: GlobalSettingsSubscriptionWhereInput): GlobalSettingsSubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  groupColor(where: GroupColorSubscriptionWhereInput): GroupColorSubscriptionPayload
  initiator(where: InitiatorSubscriptionWhereInput): InitiatorSubscriptionPayload
  ipaq(where: IpaqSubscriptionWhereInput): IpaqSubscriptionPayload
  ipaqAnswers(where: IpaqAnswersSubscriptionWhereInput): IpaqAnswersSubscriptionPayload
  joinedChallenges(where: JoinedChallengesSubscriptionWhereInput): JoinedChallengesSubscriptionPayload
  patient(where: PatientSubscriptionWhereInput): PatientSubscriptionPayload
  patientProfileInfo(where: PatientProfileInfoSubscriptionWhereInput): PatientProfileInfoSubscriptionPayload
  phq9(where: Phq9SubscriptionWhereInput): Phq9SubscriptionPayload
  profileActivity(where: ProfileActivitySubscriptionWhereInput): ProfileActivitySubscriptionPayload
  questionnaires(where: QuestionnairesSubscriptionWhereInput): QuestionnairesSubscriptionPayload
  scheduledTask(where: ScheduledTaskSubscriptionWhereInput): ScheduledTaskSubscriptionPayload
  sensorData(where: SensorDataSubscriptionWhereInput): SensorDataSubscriptionPayload
  timeSpan(where: TimeSpanSubscriptionWhereInput): TimeSpanSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userSettings(where: UserSettingsSubscriptionWhereInput): UserSettingsSubscriptionPayload
  voting(where: VotingSubscriptionWhereInput): VotingSubscriptionPayload
  webPushNotification(where: WebPushNotificationSubscriptionWhereInput): WebPushNotificationSubscriptionPayload
  webPushSettings(where: WebPushSettingsSubscriptionWhereInput): WebPushSettingsSubscriptionPayload
}

enum TaskTypes {
  SYSTEM_SCHEDULE_REQUEST_DESTRUCTION
  SYSTEM_AUTO_MATCH
  PUSH_NOTIFY_NEW_CHAT_MESSAGE
  BOT_WELCOME_MESSAGE
  BOT_INTRODUCTION_CREATE_ACTIVITIES_TIME
  BOT_INTRODUCTION_CREATE_ACTIVITIES_COUNT
  BOT_PLANNED_ACTIVITIES_LOW
  BOT_REMIND_TO_CHAT
  PUSH_NOTIFY_IPAQ_REMINDER
  PUSH_NOTIFY_IPAQ_REMINDER_FOLLOWUP
  PUSH_NOTIFY_PHQ_REMINDER
  PUSH_NOTIFY_PHQ_REMINDER_FOLLOWUP
  PUSH_NOTIFY_INCOMING_BUDDY_REQUEST
  PUSH_NOTIFY_INCOMING_BUDDY_REQUEST_REMINDER
  PUSH_NOTIFY_INCOMING_BUDDY_REQUEST_REMINDER_FOLLOWUP
  PUSH_NOTIFY_BUDDY_REQUEST_DENIED
  PUSH_NOTIFY_NOT_ENOUGH_ACTIVITIES_USER
  PUSH_NOTIFY_NOT_ENOUGH_ACTIVITIES_BUDDY
  PUSH_NOTIFY_TO_MUCH_ACTIVITIES_USER
  PUSH_NOTIFY_TO_MUCH_ACTIVITIES_BUDDY
  PUSH_NOTIFY_MISSED_ACTIVITY_BUDDY
}

type TimeSpan {
  id: ID!
  updatedAt: DateTime
  days: Int!
  hours: Int!
  minutes: Int!
  seconds: Int!
}

type TimeSpanConnection {
  pageInfo: PageInfo!
  edges: [TimeSpanEdge]!
  aggregate: AggregateTimeSpan!
}

input TimeSpanCreateInput {
  id: ID
  days: Int
  hours: Int
  minutes: Int
  seconds: Int
}

input TimeSpanCreateOneInput {
  create: TimeSpanCreateInput
  connect: TimeSpanWhereUniqueInput
}

type TimeSpanEdge {
  node: TimeSpan!
  cursor: String!
}

enum TimeSpanOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  days_ASC
  days_DESC
  hours_ASC
  hours_DESC
  minutes_ASC
  minutes_DESC
  seconds_ASC
  seconds_DESC
}

type TimeSpanPreviousValues {
  id: ID!
  updatedAt: DateTime
  days: Int!
  hours: Int!
  minutes: Int!
  seconds: Int!
}

type TimeSpanSubscriptionPayload {
  mutation: MutationType!
  node: TimeSpan
  updatedFields: [String!]
  previousValues: TimeSpanPreviousValues
}

input TimeSpanSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TimeSpanWhereInput
  AND: [TimeSpanSubscriptionWhereInput!]
  OR: [TimeSpanSubscriptionWhereInput!]
  NOT: [TimeSpanSubscriptionWhereInput!]
}

input TimeSpanUpdateDataInput {
  days: Int
  hours: Int
  minutes: Int
  seconds: Int
}

input TimeSpanUpdateInput {
  days: Int
  hours: Int
  minutes: Int
  seconds: Int
}

input TimeSpanUpdateManyMutationInput {
  days: Int
  hours: Int
  minutes: Int
  seconds: Int
}

input TimeSpanUpdateOneInput {
  create: TimeSpanCreateInput
  update: TimeSpanUpdateDataInput
  upsert: TimeSpanUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: TimeSpanWhereUniqueInput
}

input TimeSpanUpsertNestedInput {
  update: TimeSpanUpdateDataInput!
  create: TimeSpanCreateInput!
}

input TimeSpanWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  days: Int
  days_not: Int
  days_in: [Int!]
  days_not_in: [Int!]
  days_lt: Int
  days_lte: Int
  days_gt: Int
  days_gte: Int
  hours: Int
  hours_not: Int
  hours_in: [Int!]
  hours_not_in: [Int!]
  hours_lt: Int
  hours_lte: Int
  hours_gt: Int
  hours_gte: Int
  minutes: Int
  minutes_not: Int
  minutes_in: [Int!]
  minutes_not_in: [Int!]
  minutes_lt: Int
  minutes_lte: Int
  minutes_gt: Int
  minutes_gte: Int
  seconds: Int
  seconds_not: Int
  seconds_in: [Int!]
  seconds_not_in: [Int!]
  seconds_lt: Int
  seconds_lte: Int
  seconds_gt: Int
  seconds_gte: Int
  AND: [TimeSpanWhereInput!]
  OR: [TimeSpanWhereInput!]
  NOT: [TimeSpanWhereInput!]
}

input TimeSpanWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  password: String
  role: UserRole!
  settings: UserSettings
  notifications(where: WebPushNotificationWhereInput, orderBy: WebPushNotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WebPushNotification!]
  patient: Patient
  lastActive: DateTime
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  password: String
  role: UserRole
  settings: UserSettingsCreateOneInput
  notifications: WebPushNotificationCreateManyInput
  patient: PatientCreateOneWithoutUserInput
  lastActive: DateTime
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPatientInput {
  create: UserCreateWithoutPatientInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPatientInput {
  id: ID
  username: String!
  password: String
  role: UserRole
  settings: UserSettingsCreateOneInput
  notifications: WebPushNotificationCreateManyInput
  lastActive: DateTime
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  lastActive_ASC
  lastActive_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  password: String
  role: UserRole!
  lastActive: DateTime
}

enum UserRole {
  ADMIN
  DOCTOR
  PATIENT
  USER
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  role: UserRole
  role_not: UserRole
  role_in: [UserRole!]
  role_not_in: [UserRole!]
  lastActive: DateTime
  lastActive_not: DateTime
  lastActive_in: [DateTime!]
  lastActive_not_in: [DateTime!]
  lastActive_lt: DateTime
  lastActive_lte: DateTime
  lastActive_gt: DateTime
  lastActive_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSettings {
  id: ID!
  themeName: String
}

type UserSettingsConnection {
  pageInfo: PageInfo!
  edges: [UserSettingsEdge]!
  aggregate: AggregateUserSettings!
}

input UserSettingsCreateInput {
  id: ID
  themeName: String
}

input UserSettingsCreateOneInput {
  create: UserSettingsCreateInput
  connect: UserSettingsWhereUniqueInput
}

type UserSettingsEdge {
  node: UserSettings!
  cursor: String!
}

enum UserSettingsOrderByInput {
  id_ASC
  id_DESC
  themeName_ASC
  themeName_DESC
}

type UserSettingsPreviousValues {
  id: ID!
  themeName: String
}

type UserSettingsSubscriptionPayload {
  mutation: MutationType!
  node: UserSettings
  updatedFields: [String!]
  previousValues: UserSettingsPreviousValues
}

input UserSettingsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserSettingsWhereInput
  AND: [UserSettingsSubscriptionWhereInput!]
  OR: [UserSettingsSubscriptionWhereInput!]
  NOT: [UserSettingsSubscriptionWhereInput!]
}

input UserSettingsUpdateDataInput {
  themeName: String
}

input UserSettingsUpdateInput {
  themeName: String
}

input UserSettingsUpdateManyMutationInput {
  themeName: String
}

input UserSettingsUpdateOneInput {
  create: UserSettingsCreateInput
  update: UserSettingsUpdateDataInput
  upsert: UserSettingsUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserSettingsWhereUniqueInput
}

input UserSettingsUpsertNestedInput {
  update: UserSettingsUpdateDataInput!
  create: UserSettingsCreateInput!
}

input UserSettingsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  themeName: String
  themeName_not: String
  themeName_in: [String!]
  themeName_not_in: [String!]
  themeName_lt: String
  themeName_lte: String
  themeName_gt: String
  themeName_gte: String
  themeName_contains: String
  themeName_not_contains: String
  themeName_starts_with: String
  themeName_not_starts_with: String
  themeName_ends_with: String
  themeName_not_ends_with: String
  AND: [UserSettingsWhereInput!]
  OR: [UserSettingsWhereInput!]
  NOT: [UserSettingsWhereInput!]
}

input UserSettingsWhereUniqueInput {
  id: ID
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  username: String
  password: String
  role: UserRole
  settings: UserSettingsUpdateOneInput
  notifications: WebPushNotificationUpdateManyInput
  patient: PatientUpdateOneWithoutUserInput
  lastActive: DateTime
}

input UserUpdateInput {
  username: String
  password: String
  role: UserRole
  settings: UserSettingsUpdateOneInput
  notifications: WebPushNotificationUpdateManyInput
  patient: PatientUpdateOneWithoutUserInput
  lastActive: DateTime
}

input UserUpdateManyDataInput {
  username: String
  password: String
  role: UserRole
  lastActive: DateTime
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyMutationInput {
  username: String
  password: String
  role: UserRole
  lastActive: DateTime
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutPatientInput {
  create: UserCreateWithoutPatientInput
  update: UserUpdateWithoutPatientDataInput
  upsert: UserUpsertWithoutPatientInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutPatientDataInput {
  username: String
  password: String
  role: UserRole
  settings: UserSettingsUpdateOneInput
  notifications: WebPushNotificationUpdateManyInput
  lastActive: DateTime
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutPatientInput {
  update: UserUpdateWithoutPatientDataInput!
  create: UserCreateWithoutPatientInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  role: UserRole
  role_not: UserRole
  role_in: [UserRole!]
  role_not_in: [UserRole!]
  settings: UserSettingsWhereInput
  notifications_every: WebPushNotificationWhereInput
  notifications_some: WebPushNotificationWhereInput
  notifications_none: WebPushNotificationWhereInput
  patient: PatientWhereInput
  lastActive: DateTime
  lastActive_not: DateTime
  lastActive_in: [DateTime!]
  lastActive_not_in: [DateTime!]
  lastActive_lt: DateTime
  lastActive_lte: DateTime
  lastActive_gt: DateTime
  lastActive_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
}

type Voting {
  id: ID!
  challengeID: Challenge
  contributionID: Contribution
  title: String!
  description: String
  votedPoint: Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
}

type VotingConnection {
  pageInfo: PageInfo!
  edges: [VotingEdge]!
  aggregate: AggregateVoting!
}

input VotingCreateInput {
  id: ID
  challengeID: ChallengeCreateOneInput
  contributionID: ContributionCreateOneInput
  title: String!
  description: String
  votedPoint: Int
  createdBy: UserCreateOneInput
}

input VotingCreateOneInput {
  create: VotingCreateInput
  connect: VotingWhereUniqueInput
}

type VotingEdge {
  node: Voting!
  cursor: String!
}

enum VotingOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  votedPoint_ASC
  votedPoint_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type VotingPreviousValues {
  id: ID!
  title: String!
  description: String
  votedPoint: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type VotingSubscriptionPayload {
  mutation: MutationType!
  node: Voting
  updatedFields: [String!]
  previousValues: VotingPreviousValues
}

input VotingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VotingWhereInput
  AND: [VotingSubscriptionWhereInput!]
  OR: [VotingSubscriptionWhereInput!]
  NOT: [VotingSubscriptionWhereInput!]
}

input VotingUpdateDataInput {
  challengeID: ChallengeUpdateOneInput
  contributionID: ContributionUpdateOneInput
  title: String
  description: String
  votedPoint: Int
  createdBy: UserUpdateOneInput
}

input VotingUpdateInput {
  challengeID: ChallengeUpdateOneInput
  contributionID: ContributionUpdateOneInput
  title: String
  description: String
  votedPoint: Int
  createdBy: UserUpdateOneInput
}

input VotingUpdateManyMutationInput {
  title: String
  description: String
  votedPoint: Int
}

input VotingUpdateOneInput {
  create: VotingCreateInput
  update: VotingUpdateDataInput
  upsert: VotingUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: VotingWhereUniqueInput
}

input VotingUpsertNestedInput {
  update: VotingUpdateDataInput!
  create: VotingCreateInput!
}

input VotingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  challengeID: ChallengeWhereInput
  contributionID: ContributionWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  votedPoint: Int
  votedPoint_not: Int
  votedPoint_in: [Int!]
  votedPoint_not_in: [Int!]
  votedPoint_lt: Int
  votedPoint_lte: Int
  votedPoint_gt: Int
  votedPoint_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdBy: UserWhereInput
  AND: [VotingWhereInput!]
  OR: [VotingWhereInput!]
  NOT: [VotingWhereInput!]
}

input VotingWhereUniqueInput {
  id: ID
}

type WebPushNotification {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  notificationInformation: Json!
}

type WebPushNotificationConnection {
  pageInfo: PageInfo!
  edges: [WebPushNotificationEdge]!
  aggregate: AggregateWebPushNotification!
}

input WebPushNotificationCreateInput {
  id: ID
  name: String!
  notificationInformation: Json!
}

input WebPushNotificationCreateManyInput {
  create: [WebPushNotificationCreateInput!]
  connect: [WebPushNotificationWhereUniqueInput!]
}

type WebPushNotificationEdge {
  node: WebPushNotification!
  cursor: String!
}

enum WebPushNotificationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  notificationInformation_ASC
  notificationInformation_DESC
}

type WebPushNotificationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  notificationInformation: Json!
}

input WebPushNotificationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [WebPushNotificationScalarWhereInput!]
  OR: [WebPushNotificationScalarWhereInput!]
  NOT: [WebPushNotificationScalarWhereInput!]
}

type WebPushNotificationSubscriptionPayload {
  mutation: MutationType!
  node: WebPushNotification
  updatedFields: [String!]
  previousValues: WebPushNotificationPreviousValues
}

input WebPushNotificationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WebPushNotificationWhereInput
  AND: [WebPushNotificationSubscriptionWhereInput!]
  OR: [WebPushNotificationSubscriptionWhereInput!]
  NOT: [WebPushNotificationSubscriptionWhereInput!]
}

input WebPushNotificationUpdateDataInput {
  name: String
  notificationInformation: Json
}

input WebPushNotificationUpdateInput {
  name: String
  notificationInformation: Json
}

input WebPushNotificationUpdateManyDataInput {
  name: String
  notificationInformation: Json
}

input WebPushNotificationUpdateManyInput {
  create: [WebPushNotificationCreateInput!]
  update: [WebPushNotificationUpdateWithWhereUniqueNestedInput!]
  upsert: [WebPushNotificationUpsertWithWhereUniqueNestedInput!]
  delete: [WebPushNotificationWhereUniqueInput!]
  connect: [WebPushNotificationWhereUniqueInput!]
  set: [WebPushNotificationWhereUniqueInput!]
  disconnect: [WebPushNotificationWhereUniqueInput!]
  deleteMany: [WebPushNotificationScalarWhereInput!]
  updateMany: [WebPushNotificationUpdateManyWithWhereNestedInput!]
}

input WebPushNotificationUpdateManyMutationInput {
  name: String
  notificationInformation: Json
}

input WebPushNotificationUpdateManyWithWhereNestedInput {
  where: WebPushNotificationScalarWhereInput!
  data: WebPushNotificationUpdateManyDataInput!
}

input WebPushNotificationUpdateWithWhereUniqueNestedInput {
  where: WebPushNotificationWhereUniqueInput!
  data: WebPushNotificationUpdateDataInput!
}

input WebPushNotificationUpsertWithWhereUniqueNestedInput {
  where: WebPushNotificationWhereUniqueInput!
  update: WebPushNotificationUpdateDataInput!
  create: WebPushNotificationCreateInput!
}

input WebPushNotificationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [WebPushNotificationWhereInput!]
  OR: [WebPushNotificationWhereInput!]
  NOT: [WebPushNotificationWhereInput!]
}

input WebPushNotificationWhereUniqueInput {
  id: ID
}

type WebPushSettings {
  id: ID!
  updatedAt: DateTime
  webPushIpaqReminderIntervall: TimeSpan
  webPushIpaqReminderIntervallFollowUp: TimeSpan
  webPushIpaqReminderMessage: String
  webPushPhqReminderIntervall: TimeSpan
  webPushPhqReminderIntervallFollowUp: TimeSpan
  webPushPhqReminderMessage: String
  webPushIncomingBuddyRequestMessage: String
  webPushIncomingBuddyRequestDelay: TimeSpan
  webPushIncomingRequestNoResponseMessage: String
  webPushIncomingRequestNoResponseIntervall: TimeSpan
  webPushIncomingRequestNoResponseFollowupIntervall: TimeSpan
  webPushIncomingRequestNotAnsweredMessage: String
  webPushIncomingRequestNotAnsweredIntervall: TimeSpan
  webPushNotEnoughActivitiesMessage: String
  webPushNotEnoughActivitiesWeekday: Int
  webPushNotEnoughActivitiesBuddyMessage: String
  webPushNotEnoughActivitiesBuddyWeekday: Int
  webPushToManyActivitiesMessage: String
  webPushToManyActivitiesWeekday: Int
  webPushToManyActivitiesBuddyMessage: String
  webPushToManyActivitiesBuddyDelay: TimeSpan
  webPushActivityMissedBuddyMessage: String
  webPushActivityMissedBuddyDelay: TimeSpan
}

type WebPushSettingsConnection {
  pageInfo: PageInfo!
  edges: [WebPushSettingsEdge]!
  aggregate: AggregateWebPushSettings!
}

input WebPushSettingsCreateInput {
  id: ID
  webPushIpaqReminderIntervall: TimeSpanCreateOneInput
  webPushIpaqReminderIntervallFollowUp: TimeSpanCreateOneInput
  webPushIpaqReminderMessage: String
  webPushPhqReminderIntervall: TimeSpanCreateOneInput
  webPushPhqReminderIntervallFollowUp: TimeSpanCreateOneInput
  webPushPhqReminderMessage: String
  webPushIncomingBuddyRequestMessage: String
  webPushIncomingBuddyRequestDelay: TimeSpanCreateOneInput
  webPushIncomingRequestNoResponseMessage: String
  webPushIncomingRequestNoResponseIntervall: TimeSpanCreateOneInput
  webPushIncomingRequestNoResponseFollowupIntervall: TimeSpanCreateOneInput
  webPushIncomingRequestNotAnsweredMessage: String
  webPushIncomingRequestNotAnsweredIntervall: TimeSpanCreateOneInput
  webPushNotEnoughActivitiesMessage: String
  webPushNotEnoughActivitiesWeekday: Int
  webPushNotEnoughActivitiesBuddyMessage: String
  webPushNotEnoughActivitiesBuddyWeekday: Int
  webPushToManyActivitiesMessage: String
  webPushToManyActivitiesWeekday: Int
  webPushToManyActivitiesBuddyMessage: String
  webPushToManyActivitiesBuddyDelay: TimeSpanCreateOneInput
  webPushActivityMissedBuddyMessage: String
  webPushActivityMissedBuddyDelay: TimeSpanCreateOneInput
}

input WebPushSettingsCreateOneInput {
  create: WebPushSettingsCreateInput
  connect: WebPushSettingsWhereUniqueInput
}

type WebPushSettingsEdge {
  node: WebPushSettings!
  cursor: String!
}

enum WebPushSettingsOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  webPushIpaqReminderMessage_ASC
  webPushIpaqReminderMessage_DESC
  webPushPhqReminderMessage_ASC
  webPushPhqReminderMessage_DESC
  webPushIncomingBuddyRequestMessage_ASC
  webPushIncomingBuddyRequestMessage_DESC
  webPushIncomingRequestNoResponseMessage_ASC
  webPushIncomingRequestNoResponseMessage_DESC
  webPushIncomingRequestNotAnsweredMessage_ASC
  webPushIncomingRequestNotAnsweredMessage_DESC
  webPushNotEnoughActivitiesMessage_ASC
  webPushNotEnoughActivitiesMessage_DESC
  webPushNotEnoughActivitiesWeekday_ASC
  webPushNotEnoughActivitiesWeekday_DESC
  webPushNotEnoughActivitiesBuddyMessage_ASC
  webPushNotEnoughActivitiesBuddyMessage_DESC
  webPushNotEnoughActivitiesBuddyWeekday_ASC
  webPushNotEnoughActivitiesBuddyWeekday_DESC
  webPushToManyActivitiesMessage_ASC
  webPushToManyActivitiesMessage_DESC
  webPushToManyActivitiesWeekday_ASC
  webPushToManyActivitiesWeekday_DESC
  webPushToManyActivitiesBuddyMessage_ASC
  webPushToManyActivitiesBuddyMessage_DESC
  webPushActivityMissedBuddyMessage_ASC
  webPushActivityMissedBuddyMessage_DESC
}

type WebPushSettingsPreviousValues {
  id: ID!
  updatedAt: DateTime
  webPushIpaqReminderMessage: String
  webPushPhqReminderMessage: String
  webPushIncomingBuddyRequestMessage: String
  webPushIncomingRequestNoResponseMessage: String
  webPushIncomingRequestNotAnsweredMessage: String
  webPushNotEnoughActivitiesMessage: String
  webPushNotEnoughActivitiesWeekday: Int
  webPushNotEnoughActivitiesBuddyMessage: String
  webPushNotEnoughActivitiesBuddyWeekday: Int
  webPushToManyActivitiesMessage: String
  webPushToManyActivitiesWeekday: Int
  webPushToManyActivitiesBuddyMessage: String
  webPushActivityMissedBuddyMessage: String
}

type WebPushSettingsSubscriptionPayload {
  mutation: MutationType!
  node: WebPushSettings
  updatedFields: [String!]
  previousValues: WebPushSettingsPreviousValues
}

input WebPushSettingsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WebPushSettingsWhereInput
  AND: [WebPushSettingsSubscriptionWhereInput!]
  OR: [WebPushSettingsSubscriptionWhereInput!]
  NOT: [WebPushSettingsSubscriptionWhereInput!]
}

input WebPushSettingsUpdateDataInput {
  webPushIpaqReminderIntervall: TimeSpanUpdateOneInput
  webPushIpaqReminderIntervallFollowUp: TimeSpanUpdateOneInput
  webPushIpaqReminderMessage: String
  webPushPhqReminderIntervall: TimeSpanUpdateOneInput
  webPushPhqReminderIntervallFollowUp: TimeSpanUpdateOneInput
  webPushPhqReminderMessage: String
  webPushIncomingBuddyRequestMessage: String
  webPushIncomingBuddyRequestDelay: TimeSpanUpdateOneInput
  webPushIncomingRequestNoResponseMessage: String
  webPushIncomingRequestNoResponseIntervall: TimeSpanUpdateOneInput
  webPushIncomingRequestNoResponseFollowupIntervall: TimeSpanUpdateOneInput
  webPushIncomingRequestNotAnsweredMessage: String
  webPushIncomingRequestNotAnsweredIntervall: TimeSpanUpdateOneInput
  webPushNotEnoughActivitiesMessage: String
  webPushNotEnoughActivitiesWeekday: Int
  webPushNotEnoughActivitiesBuddyMessage: String
  webPushNotEnoughActivitiesBuddyWeekday: Int
  webPushToManyActivitiesMessage: String
  webPushToManyActivitiesWeekday: Int
  webPushToManyActivitiesBuddyMessage: String
  webPushToManyActivitiesBuddyDelay: TimeSpanUpdateOneInput
  webPushActivityMissedBuddyMessage: String
  webPushActivityMissedBuddyDelay: TimeSpanUpdateOneInput
}

input WebPushSettingsUpdateInput {
  webPushIpaqReminderIntervall: TimeSpanUpdateOneInput
  webPushIpaqReminderIntervallFollowUp: TimeSpanUpdateOneInput
  webPushIpaqReminderMessage: String
  webPushPhqReminderIntervall: TimeSpanUpdateOneInput
  webPushPhqReminderIntervallFollowUp: TimeSpanUpdateOneInput
  webPushPhqReminderMessage: String
  webPushIncomingBuddyRequestMessage: String
  webPushIncomingBuddyRequestDelay: TimeSpanUpdateOneInput
  webPushIncomingRequestNoResponseMessage: String
  webPushIncomingRequestNoResponseIntervall: TimeSpanUpdateOneInput
  webPushIncomingRequestNoResponseFollowupIntervall: TimeSpanUpdateOneInput
  webPushIncomingRequestNotAnsweredMessage: String
  webPushIncomingRequestNotAnsweredIntervall: TimeSpanUpdateOneInput
  webPushNotEnoughActivitiesMessage: String
  webPushNotEnoughActivitiesWeekday: Int
  webPushNotEnoughActivitiesBuddyMessage: String
  webPushNotEnoughActivitiesBuddyWeekday: Int
  webPushToManyActivitiesMessage: String
  webPushToManyActivitiesWeekday: Int
  webPushToManyActivitiesBuddyMessage: String
  webPushToManyActivitiesBuddyDelay: TimeSpanUpdateOneInput
  webPushActivityMissedBuddyMessage: String
  webPushActivityMissedBuddyDelay: TimeSpanUpdateOneInput
}

input WebPushSettingsUpdateManyMutationInput {
  webPushIpaqReminderMessage: String
  webPushPhqReminderMessage: String
  webPushIncomingBuddyRequestMessage: String
  webPushIncomingRequestNoResponseMessage: String
  webPushIncomingRequestNotAnsweredMessage: String
  webPushNotEnoughActivitiesMessage: String
  webPushNotEnoughActivitiesWeekday: Int
  webPushNotEnoughActivitiesBuddyMessage: String
  webPushNotEnoughActivitiesBuddyWeekday: Int
  webPushToManyActivitiesMessage: String
  webPushToManyActivitiesWeekday: Int
  webPushToManyActivitiesBuddyMessage: String
  webPushActivityMissedBuddyMessage: String
}

input WebPushSettingsUpdateOneInput {
  create: WebPushSettingsCreateInput
  update: WebPushSettingsUpdateDataInput
  upsert: WebPushSettingsUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: WebPushSettingsWhereUniqueInput
}

input WebPushSettingsUpsertNestedInput {
  update: WebPushSettingsUpdateDataInput!
  create: WebPushSettingsCreateInput!
}

input WebPushSettingsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  webPushIpaqReminderIntervall: TimeSpanWhereInput
  webPushIpaqReminderIntervallFollowUp: TimeSpanWhereInput
  webPushIpaqReminderMessage: String
  webPushIpaqReminderMessage_not: String
  webPushIpaqReminderMessage_in: [String!]
  webPushIpaqReminderMessage_not_in: [String!]
  webPushIpaqReminderMessage_lt: String
  webPushIpaqReminderMessage_lte: String
  webPushIpaqReminderMessage_gt: String
  webPushIpaqReminderMessage_gte: String
  webPushIpaqReminderMessage_contains: String
  webPushIpaqReminderMessage_not_contains: String
  webPushIpaqReminderMessage_starts_with: String
  webPushIpaqReminderMessage_not_starts_with: String
  webPushIpaqReminderMessage_ends_with: String
  webPushIpaqReminderMessage_not_ends_with: String
  webPushPhqReminderIntervall: TimeSpanWhereInput
  webPushPhqReminderIntervallFollowUp: TimeSpanWhereInput
  webPushPhqReminderMessage: String
  webPushPhqReminderMessage_not: String
  webPushPhqReminderMessage_in: [String!]
  webPushPhqReminderMessage_not_in: [String!]
  webPushPhqReminderMessage_lt: String
  webPushPhqReminderMessage_lte: String
  webPushPhqReminderMessage_gt: String
  webPushPhqReminderMessage_gte: String
  webPushPhqReminderMessage_contains: String
  webPushPhqReminderMessage_not_contains: String
  webPushPhqReminderMessage_starts_with: String
  webPushPhqReminderMessage_not_starts_with: String
  webPushPhqReminderMessage_ends_with: String
  webPushPhqReminderMessage_not_ends_with: String
  webPushIncomingBuddyRequestMessage: String
  webPushIncomingBuddyRequestMessage_not: String
  webPushIncomingBuddyRequestMessage_in: [String!]
  webPushIncomingBuddyRequestMessage_not_in: [String!]
  webPushIncomingBuddyRequestMessage_lt: String
  webPushIncomingBuddyRequestMessage_lte: String
  webPushIncomingBuddyRequestMessage_gt: String
  webPushIncomingBuddyRequestMessage_gte: String
  webPushIncomingBuddyRequestMessage_contains: String
  webPushIncomingBuddyRequestMessage_not_contains: String
  webPushIncomingBuddyRequestMessage_starts_with: String
  webPushIncomingBuddyRequestMessage_not_starts_with: String
  webPushIncomingBuddyRequestMessage_ends_with: String
  webPushIncomingBuddyRequestMessage_not_ends_with: String
  webPushIncomingBuddyRequestDelay: TimeSpanWhereInput
  webPushIncomingRequestNoResponseMessage: String
  webPushIncomingRequestNoResponseMessage_not: String
  webPushIncomingRequestNoResponseMessage_in: [String!]
  webPushIncomingRequestNoResponseMessage_not_in: [String!]
  webPushIncomingRequestNoResponseMessage_lt: String
  webPushIncomingRequestNoResponseMessage_lte: String
  webPushIncomingRequestNoResponseMessage_gt: String
  webPushIncomingRequestNoResponseMessage_gte: String
  webPushIncomingRequestNoResponseMessage_contains: String
  webPushIncomingRequestNoResponseMessage_not_contains: String
  webPushIncomingRequestNoResponseMessage_starts_with: String
  webPushIncomingRequestNoResponseMessage_not_starts_with: String
  webPushIncomingRequestNoResponseMessage_ends_with: String
  webPushIncomingRequestNoResponseMessage_not_ends_with: String
  webPushIncomingRequestNoResponseIntervall: TimeSpanWhereInput
  webPushIncomingRequestNoResponseFollowupIntervall: TimeSpanWhereInput
  webPushIncomingRequestNotAnsweredMessage: String
  webPushIncomingRequestNotAnsweredMessage_not: String
  webPushIncomingRequestNotAnsweredMessage_in: [String!]
  webPushIncomingRequestNotAnsweredMessage_not_in: [String!]
  webPushIncomingRequestNotAnsweredMessage_lt: String
  webPushIncomingRequestNotAnsweredMessage_lte: String
  webPushIncomingRequestNotAnsweredMessage_gt: String
  webPushIncomingRequestNotAnsweredMessage_gte: String
  webPushIncomingRequestNotAnsweredMessage_contains: String
  webPushIncomingRequestNotAnsweredMessage_not_contains: String
  webPushIncomingRequestNotAnsweredMessage_starts_with: String
  webPushIncomingRequestNotAnsweredMessage_not_starts_with: String
  webPushIncomingRequestNotAnsweredMessage_ends_with: String
  webPushIncomingRequestNotAnsweredMessage_not_ends_with: String
  webPushIncomingRequestNotAnsweredIntervall: TimeSpanWhereInput
  webPushNotEnoughActivitiesMessage: String
  webPushNotEnoughActivitiesMessage_not: String
  webPushNotEnoughActivitiesMessage_in: [String!]
  webPushNotEnoughActivitiesMessage_not_in: [String!]
  webPushNotEnoughActivitiesMessage_lt: String
  webPushNotEnoughActivitiesMessage_lte: String
  webPushNotEnoughActivitiesMessage_gt: String
  webPushNotEnoughActivitiesMessage_gte: String
  webPushNotEnoughActivitiesMessage_contains: String
  webPushNotEnoughActivitiesMessage_not_contains: String
  webPushNotEnoughActivitiesMessage_starts_with: String
  webPushNotEnoughActivitiesMessage_not_starts_with: String
  webPushNotEnoughActivitiesMessage_ends_with: String
  webPushNotEnoughActivitiesMessage_not_ends_with: String
  webPushNotEnoughActivitiesWeekday: Int
  webPushNotEnoughActivitiesWeekday_not: Int
  webPushNotEnoughActivitiesWeekday_in: [Int!]
  webPushNotEnoughActivitiesWeekday_not_in: [Int!]
  webPushNotEnoughActivitiesWeekday_lt: Int
  webPushNotEnoughActivitiesWeekday_lte: Int
  webPushNotEnoughActivitiesWeekday_gt: Int
  webPushNotEnoughActivitiesWeekday_gte: Int
  webPushNotEnoughActivitiesBuddyMessage: String
  webPushNotEnoughActivitiesBuddyMessage_not: String
  webPushNotEnoughActivitiesBuddyMessage_in: [String!]
  webPushNotEnoughActivitiesBuddyMessage_not_in: [String!]
  webPushNotEnoughActivitiesBuddyMessage_lt: String
  webPushNotEnoughActivitiesBuddyMessage_lte: String
  webPushNotEnoughActivitiesBuddyMessage_gt: String
  webPushNotEnoughActivitiesBuddyMessage_gte: String
  webPushNotEnoughActivitiesBuddyMessage_contains: String
  webPushNotEnoughActivitiesBuddyMessage_not_contains: String
  webPushNotEnoughActivitiesBuddyMessage_starts_with: String
  webPushNotEnoughActivitiesBuddyMessage_not_starts_with: String
  webPushNotEnoughActivitiesBuddyMessage_ends_with: String
  webPushNotEnoughActivitiesBuddyMessage_not_ends_with: String
  webPushNotEnoughActivitiesBuddyWeekday: Int
  webPushNotEnoughActivitiesBuddyWeekday_not: Int
  webPushNotEnoughActivitiesBuddyWeekday_in: [Int!]
  webPushNotEnoughActivitiesBuddyWeekday_not_in: [Int!]
  webPushNotEnoughActivitiesBuddyWeekday_lt: Int
  webPushNotEnoughActivitiesBuddyWeekday_lte: Int
  webPushNotEnoughActivitiesBuddyWeekday_gt: Int
  webPushNotEnoughActivitiesBuddyWeekday_gte: Int
  webPushToManyActivitiesMessage: String
  webPushToManyActivitiesMessage_not: String
  webPushToManyActivitiesMessage_in: [String!]
  webPushToManyActivitiesMessage_not_in: [String!]
  webPushToManyActivitiesMessage_lt: String
  webPushToManyActivitiesMessage_lte: String
  webPushToManyActivitiesMessage_gt: String
  webPushToManyActivitiesMessage_gte: String
  webPushToManyActivitiesMessage_contains: String
  webPushToManyActivitiesMessage_not_contains: String
  webPushToManyActivitiesMessage_starts_with: String
  webPushToManyActivitiesMessage_not_starts_with: String
  webPushToManyActivitiesMessage_ends_with: String
  webPushToManyActivitiesMessage_not_ends_with: String
  webPushToManyActivitiesWeekday: Int
  webPushToManyActivitiesWeekday_not: Int
  webPushToManyActivitiesWeekday_in: [Int!]
  webPushToManyActivitiesWeekday_not_in: [Int!]
  webPushToManyActivitiesWeekday_lt: Int
  webPushToManyActivitiesWeekday_lte: Int
  webPushToManyActivitiesWeekday_gt: Int
  webPushToManyActivitiesWeekday_gte: Int
  webPushToManyActivitiesBuddyMessage: String
  webPushToManyActivitiesBuddyMessage_not: String
  webPushToManyActivitiesBuddyMessage_in: [String!]
  webPushToManyActivitiesBuddyMessage_not_in: [String!]
  webPushToManyActivitiesBuddyMessage_lt: String
  webPushToManyActivitiesBuddyMessage_lte: String
  webPushToManyActivitiesBuddyMessage_gt: String
  webPushToManyActivitiesBuddyMessage_gte: String
  webPushToManyActivitiesBuddyMessage_contains: String
  webPushToManyActivitiesBuddyMessage_not_contains: String
  webPushToManyActivitiesBuddyMessage_starts_with: String
  webPushToManyActivitiesBuddyMessage_not_starts_with: String
  webPushToManyActivitiesBuddyMessage_ends_with: String
  webPushToManyActivitiesBuddyMessage_not_ends_with: String
  webPushToManyActivitiesBuddyDelay: TimeSpanWhereInput
  webPushActivityMissedBuddyMessage: String
  webPushActivityMissedBuddyMessage_not: String
  webPushActivityMissedBuddyMessage_in: [String!]
  webPushActivityMissedBuddyMessage_not_in: [String!]
  webPushActivityMissedBuddyMessage_lt: String
  webPushActivityMissedBuddyMessage_lte: String
  webPushActivityMissedBuddyMessage_gt: String
  webPushActivityMissedBuddyMessage_gte: String
  webPushActivityMissedBuddyMessage_contains: String
  webPushActivityMissedBuddyMessage_not_contains: String
  webPushActivityMissedBuddyMessage_starts_with: String
  webPushActivityMissedBuddyMessage_not_starts_with: String
  webPushActivityMissedBuddyMessage_ends_with: String
  webPushActivityMissedBuddyMessage_not_ends_with: String
  webPushActivityMissedBuddyDelay: TimeSpanWhereInput
  AND: [WebPushSettingsWhereInput!]
  OR: [WebPushSettingsWhereInput!]
  NOT: [WebPushSettingsWhereInput!]
}

input WebPushSettingsWhereUniqueInput {
  id: ID
}
`